/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});


Ext.application({
    models: [
        'MdMessage',
        'MdSectionMaster',
        'MdEmployee',
        'MdGeneral',
        'MdMessageStatus',
        'MdMessageFlag',
        'MdMessageComment',
        'MdGroupMemberMaster',
        'MdDestination',
        'MdMember',
        'MdCircleMemberMaster',
        'MdCircleMemberRole'
    ],
    stores: [
        'StEmployees',
        'StSectionMasters',
        'StMMembers',
        'StMessageComments',
        'StMessageFlags',
        'StCCtogroup',
        'StMessageType',
        'StMessageStatus',
        'StMessages',
        'StGroupTree',
        'StGroupMemberMaster',
        'StSender',
        'StProgressesSearch',
        'StProgresses',
        'StCriticalLevelsSearch',
        'StCriticalLevels',
        'StGroup',
        'StCircleMemberMaster',
        'StCircleGroupTree',
        'StEmployeesSearch',
        'StTheme',
        'StFixedForm',
        'StCircleGroup',
        'StCircleGroupEdit',
        'StCircleMemberRole',
        'StGroupMain',
        'StTag'
    ],
    views: [
        'UcMessageDestinationPart',
        'FrmWork',
        'FrmGroupCircle',
        'MainView',
        'FrmAddMsg',
        'FrmSearchMsg',
        'FrmTimeReport',
        'UcTreeMember'
    ],
    controllers: [
        'CFrmSearchMsg',
        'CAccount',
        'CUcMessagePart',
        'CFrmGroupCircle',
        'CFrmAddMsg',
        'CFrmMain',
        'CFrmTimeReport',
        'CFrmWork',
        'CucTreeMember'
    ],
    name: 'MyApp',

    launch: function() {
        Ext.create('MyApp.view.MainView');
        //Define global variable
        Ext.define('MyApp.util.Utilities', {
            userEmpInfo: null,
            singleton: true,
            selectSectionPublic: null,
            frmMessageStatusAddNew: null ,// when add new = true & edit = false,
            messageId : null,
            message: null,
            token: null,
            sessionID: null,
            arrayReciver:null,
            msgCircle:null,
            openedForm: false,
            isLoadingMsg:false,
            currentCircle:null, //user chose a circle(left of main) and press addNewMSG that circle will be use
            currentCircleMember:null
        });

        //Change store proxy url

        var storeIDs = [
            'StSectionMasters',
            'StCircleGroupTree',
            'StGroupMain',
            'StEmployees',
            'StSectionFilters',
            'StMMembers',
            'StMessageComments',
            'StMessageFlags',
            'StMessages',
            'StGroup',
            'StProgresses',
            'StProgressesSearch',
            'StSender',
            'StGroupMemberMaster',
            'StCircleGroup',
            'StCircleMemberMaster',
            'StEmployeesSearch',
            'StFixedForm',
            'StCircleGroupEdit',
            'StCircleMemberRole',
            'StTag'
        ];
        var i = 0;
        for(i = 0; i < storeIDs.length; i++){
            var store = Ext.getStore(storeIDs[i]);
            if(store){
                store.getProxy().url = apiUrl + store.getProxy().url;
            }
        }

        var cAccount = new MyApp.controller.CAccount();
        var frmMain = cAccount.getFrmMain();
        var pnlLogin = cAccount.getPnlLogin();
        Ext.Ajax.defaultHeaders = {
            'token': Global.authData.token
        };
        Ext.getStore('StSectionMasters').load({
            callback: function(records, operation, success){
                if(success){
                    this.insert(0,{'EMP_SECTION_ID':null,'EMP_SECTION_NAME':'---'});
                }
            }
        });

        if(!Global.userLoged){
            pnlLogin.show();
            var pnlLogin = cAccount.getPnlLogin();
            pnlLogin.setLoading(true, true);
            Ext.getStore('StEmployees').load(function(){
                pnlLogin.setLoading(false);
            });

        }else{
            Ext.Ajax.defaultHeaders = {
                'token': Global.authData.token,
                'sessionID': Global.authData.sessionID
            };
            Ext.Ajax.on("beforerequest", function(conn, options){
                var xmlhttp = null;
                if (window.XMLHttpRequest){
                    xmlhttp = new XMLHttpRequest();
                }
                else{
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                if(xmlhttp !== null){
                    xmlhttp.open("GET",phpClientUrl + "/site/checkLogin", false);
                    xmlhttp.send();
                    var data = Ext.decode(xmlhttp.responseText);
                    if(!data.success){
                        window.location = window.location;
                    }
                }
                else
                {
                    alert("Your browser does not support XMLHTTP.");
                }
            });
            MyApp.util.Utilities.token = Global.authData.token;
            MyApp.util.Utilities.sessionID = Global.authData.sessionID;
            MyApp.util.Utilities.userEmpInfo = Global.authData.userEmpInfo;

            Ext.getStore('StCircleGroupTree').load( {params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});
            Ext.getStore('StMessages').load();
            Ext.getStore('StEmployeesSearch').load();
            frmMain.show();
            Work.getWorkInfo(MyApp.util.Utilities.userEmpInfo.EMP_ID);
            Ext.getStore('StEmployees').load();
            Ext.getStore('StSectionMasters').load();
            Ext.getStore('StCircleMemberRole').load();




        }


        // exit a popup form can't popup more
        Ext.EventManager.on(window, 'keydown', function(e, t) {
            if(e.ctrlKey){
                switch(e.button){
                    case 76: if(checkOpenedForm())return ;new MyApp.controller.CFrmMain().btnMainAddMsgClick(); break;
                    case 82: new MyApp.controller.CFrmMain().btnMainScheduleClick();break;
                    case 67: if(checkOpenedForm()||MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE)return ;new MyApp.controller.CFrmMain().btnWorkClick(); break;
                    case 70: if(checkOpenedForm()||MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE)return ;new MyApp.controller.CFrmMain().btnCircleClick();break;

                    case 38: if(Ext.getCmp('btnFavorite').disabled===true)return ; new MyApp.controller.CFrmMain().btnFavoriteClick();break;
                    case 112:
                        if(checkOpenedForm())return;
                        if(Ext.getCmp('pnlSearch').hidden===true){
                            Ext.getCmp('pnlSearch').show();
                            Ext.getCmp('btnQuickSearch').setIcon('resources/images/upicon.ico');
                        }
                        else{
                            Ext.getCmp('pnlSearch').hide();
                            Ext.getCmp('btnQuickSearch').setIcon('resources/images/downicon.ico');
                        }
                        break;

                    case 113: if(Ext.getCmp('btnFavorite').disabled===true) return ; new MyApp.controller.CFrmMain().btnFavoriteClick(Ext.getCmp('btnFavorite'));break;

                        //case 116: new MyApp.controller.CFrmMain().setcboMessageType(0);break;
                        //case 117: new MyApp.controller.CFrmMain().setcboMessageType(1);break;
                        //case 118: new MyApp.controller.CFrmMain().setcboMessageType(2);break;
                        //case 119: new MyApp.controller.CFrmMain().setcboMessageType(3);break;

                        //case 120: new MyApp.controller.CFrmMain().resetSearchValue();break;
                    default: return;
                }
                e.stopEvent();
            }
        });

        function checkOpenedForm(){
            if(MyApp.util.Utilities.openedForm===true){
                MessageCommon.showInfoMessage('新しいポップアップ画面を開く前に、すでに開いているポップアップ画面を閉じてください。');//Close pop up before open a new one
                return true;
            }
            return false;
        }
    }

});
