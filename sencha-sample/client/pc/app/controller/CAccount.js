/*
 * File: app/controller/CAccount.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CAccount', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'mainView',
            selector: 'mainview'
        },
        {
            ref: 'btnLogout',
            selector: '#btnLogout'
        },
        {
            ref: 'frmMain',
            selector: '#frmMain'
        },
        {
            ref: 'cboEmployee',
            selector: '#cboEmployee'
        },
        {
            ref: 'txtPassword',
            selector: '#txtPassword'
        },
        {
            ref: 'txtPasswordSecret',
            selector: '#txtPasswordSecret'
        },
        {
            ref: 'pnlLogin',
            selector: '#pnlLogin'
        },
        {
            ref: 'frmLogin',
            selector: '#frmLogin'
        }
    ],

    btnLoginClick: function(button, e, eOpts) {
        var frmLogin = this.getFrmLogin(),
            pnlLogin = this.getPnlLogin(),
            values = frmLogin.getValues(),
            frmMain = this.getFrmMain(),
            txtPassword = this.getTxtPassword();
            txtPasswordSecret = this.getTxtPasswordSecret();

        if(values.cboEmployee !== null && values.cboEmployee !== '' && typeof(values.cboEmployee) !== 'undefined'){
            var cboEmployee = this.getCboEmployee();
            var employee = cboEmployee.getStore().findRecord('EMP_ID', values.cboEmployee);
            if(employee !== null){
                Ext.Ajax.request({
                    method: 'POST',
                    url: apiUrl + 'site/login',
                    params: {
                        empUsername: values.cboEmployee,
                        empPassword: values.txtPassword.toString(),
                        empPasswordSecret: values.txtPasswordSecret.toString(),
                        internalAccess: Global.internalAccess
                    },
                    success: function(data){
                        var obj = Ext.decode(data.responseText);
                        if(obj.success === true){
                            Ext.Ajax.defaultHeaders = {
                                'token': obj.data.token,
                                'sessionID': obj.data.sessionID
                            };
                            MyApp.util.Utilities.token = obj.data.token;
                            MyApp.util.Utilities.sessionID = obj.data.sessionID;
                            MyApp.util.Utilities.userEmpInfo = obj.data.userEmpInfo;
                            MyApp.util.Utilities.currentCircle=null;

                            Ext.getStore('StCircleGroupTree').load( {params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});
                            Ext.getStore('StMessages').load();
                            Ext.getStore('StEmployeesSearch').load();

                            txtPassword.setValue('');
                            txtPasswordSecret.setValue('');
                            //--->Thong ADD 2014/06/06
                            Work.getWorkInfo(MyApp.util.Utilities.userEmpInfo.EMP_ID);
                            //Work.show();
                            //<---
                            obj.data.apiUrl = apiUrl;
                            Ext.Ajax.request({
                                method: 'POST',
                                url: 'site/login',
                                params: {data: Ext.encode(obj.data)},
                                success: function(data){
                                    var obj = Ext.decode(data.responseText);
                                    if(obj.success){
                                        pnlLogin.hide();
                                        frmMain.show();

                                        Ext.Ajax.on("beforerequest", function(conn, options){
                                            var xmlhttp = null;
                                            if (window.XMLHttpRequest){
                                                xmlhttp = new XMLHttpRequest();
                                            }
                                            else{
                                                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                                            }
                                            if(xmlhttp !== null){
                                                xmlhttp.open("GET",phpClientUrl + "/site/checkLogin", false);
                                                xmlhttp.send();
                                                var data = Ext.decode(xmlhttp.responseText);
                                                if(!data.success){
                                                    window.location = window.location;
                                                }
                                            }
                                            else
                                            {
                                                alert("Your browser does not support XMLHTTP.");
                                            }
                                        });
                                    }else{
                                        window.location = window.location;
                                    }
                                },
                                failure: function(error){
                                    window.location = window.location;
                                }

                            });
                        }else{
                            MessageCommon.showErrorMessage(MessageCommon.PasswordWrong);
                        }
                    },
                    failure: function(error){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    }
                });
            }else{
                MessageCommon.showErrorMessage(MessageCommon.EmployeeNotExists);
            }

        }else{
            console.log(values);
            MessageCommon.showErrorMessage(MessageCommon.EmployeeNull);
        }
    },

    txtPasswordKeydown: function(textfield, e, eOpts) {
        var key = e.which || e.keyCode;
        if(key == 13) {
            this.btnLoginClick();
        }
    },

    btnMainLogOutClick: function(button, e, eOpts) {
        var pnlLogin = this.getPnlLogin(),
            frmMain = this.getFrmMain();


        Ext.Msg.confirm("ログアウト", "本当にログアウトしますか？", function(btn){//Are you sure you want to logout?
            if (btn == 'yes'){
                Ext.Ajax.request({
                    url: 'site/logout',
                    method: 'get',
                    success: function(data){
                        window.location = window.location;
                    },
                    failure: function(error){

                    }
                });
            }
        });
    },

    cboSectionChange: function(field, newValue, oldValue, eOpts) {
        var cboEmployee = this.getCboEmployee();
        cboEmployee.getStore().clearFilter();
        cboEmployee.setValue('');
        if(newValue !== null){
            cboEmployee.getStore().filter([{
                property:'EMP_SECTION_ID',
                value: newValue,
                exactMatch: true
            }]);
            if(typeof(cboEmployee.getStore().getAt(0)) != 'undefined')
                cboEmployee.setValue(cboEmployee.getStore().getAt(0).get('EMP_ID'));
        }
    },

    pnlLoginAfterRender: function(component, eOpts) {
        if(Global.internalAccess){
            Ext.getCmp('txtPasswordSecret').setVisible(false);
        }
    },

    init: function(application) {
        this.control({
            "#btnLogin": {
                click: this.btnLoginClick
            },
            "#txtPassword": {
                keydown: this.txtPasswordKeydown
            },
            "#btnMainLogOut": {
                click: this.btnMainLogOutClick
            },
            "#cboSection": {
                change: this.cboSectionChange
            },
            "#pnlLogin": {
                afterrender: this.pnlLoginAfterRender
            }
        });
    }

});
