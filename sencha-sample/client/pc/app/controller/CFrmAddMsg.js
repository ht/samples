/*
 * File: app/controller/CFrmAddMsg.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CFrmAddMsg', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'cboMessagePartImportant',
            selector: '#cboMessagePartImportant'
        },
        {
            ref: 'tvwMember',
            selector: '#tvwMember'
        }
    ],

    btnCloseFrmAddMsgClick: function(button, e, eOpts) {
        button.up('window').close();
        MyApp.util.Utilities.openedForm=false;
    },

    btnSaveClick: function(button, e, eOpts) {

        Ext.getCmp('FrmAddMsg').setLoading(true);
        var me = this; // me as current controller

        setTimeout(function(){
            var attachFileFlagle=false; // flag to know attach more file of not

            var upload = Ext.getCmp('fileAttach').fileInputEl.dom,
                files = upload.files,
                names = [];

            if (files) {
                if (files.length>0){
                    attachFileFlagle=true;
                }
            }

            if(Ext.getCmp('chkCircle').getValue()&& Ext.getCmp('cboCircle').getValue()===null){
                MessageCommon.showErrorMessage(MessageCommon.InvalidEmp);//MessageCommon.InvalidEmp
                return ;
            }

            // try{
            var msgId =0;
            var requestUrl='';
            var successStatus=false;

            var sReleaseDate=Ext.getCmp('txtReleaseDate').getValue().trim().replace('/', "").replace('-', "").substr(0,6);

            // set MessageInfo
            if(MyApp.util.Utilities.frmMessageStatusAddNew===true){
                requestUrl=apiUrl+'Message/AddMessage';
                msgId =0;
            }
            else{
                requestUrl=apiUrl+'Message/UpdateMessage';
                msgId =MyApp.util.Utilities.messageId;
            }
            var dtpExpilationDate = MyApp.app.common.convertDateToYmd(Ext.getCmp('dtpExpilationDate').getValue());
            var fileAttach = 0;
            // attached or attach new save checke to database



            if(Ext.getCmp('fileAttach').getValue().trim()!==''|| MyApp.util.Utilities.message.fileAttached !=='')
            {
                fileAttach=1;
            }

            var  msgGroupText= null;
            if(Ext.getCmp('cboGroup').getValue()!==undefined){
                msgGroupText=Ext.getCmp('cboGroup').getValue();
            }
            var circleId=null;
            if(Ext.getCmp('cboCircle').getValue()!==undefined){
                circleId=Ext.getCmp('cboCircle').getValue();
            }


            var arrayMessageInfo = {
                MSG_ID:msgId,
                TAG:Ext.getCmp('cboTag').getRawValue(),
                IMPORTANT_LEVEL:Ext.getCmp('cboMessagePartImportant').getValue(),
                ADD_EMP_ID:MyApp.util.Utilities.userEmpInfo.EMP_ID,
                MSG_TITLE:Ext.getCmp('txtMsgTitle').getValue(),
                MSG_TEXT:Ext.getCmp('txtMsgText').getValue(),
                ATTACHFILE: fileAttach,
                MSG_GROUP_TEXT:msgGroupText,
                EXPILATION_DATE:dtpExpilationDate,
                PROGRESS_ID: Ext.getCmp('cboMessagePartProgress').getValue(),
                RELEASE_DATE:Ext.getCmp('dtpExpilationDate').getValue(),
                CIRCLEID:circleId
            };

            var arrayEmp = [];


            var sCircleId=Ext.getCmp('cboCircle').getValue();
            if(Ext.getCmp('chkCircle').getValue()){// chose Circle

                //
                var StCircleMemberRole = Ext.getStore('StCircleMemberRole');
                if(StCircleMemberRole.getCount()===0){ //store StCircleMemberRole not load
                    StCircleMemberRole.load({
                        callback : function(records, options, success) {
                            if (success) {
                                StCircleMemberRole.each(function(record,idx){
                                    if(record.get('CIRCLE_ID')==sCircleId){
                                        arrayEmp.push(record.get('EMP_ID'));
                                    }
                                });
                                postRequest();
                            }else {
                                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                                return;
                            }
                        }
                    });
                }else{
                    StCircleMemberRole.each(function(record,idx){
                        if(record.get('CIRCLE_ID')==sCircleId){
                            arrayEmp.push(record.get('EMP_ID'));
                        }

                    });
                    postRequest();
                }

                //
            }
            else{// not chose Circle
                Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
                    if (child.get('checked')===true & child.get('leaf')===true )
                    {
                        arrayEmp.push(child.get('id'));
                    }
                });
                postRequest();
            }

            // } catch(err) {
            //     MessageCommon.showErrorMessage(MessageCommon.MesErrorExecute);
            // }

            function postRequest(){
                // check input data
                if(! me.formInputCheck(arrayEmp)){

                    Ext.getCmp('FrmAddMsg').setLoading(false);
                    return;
                }
                //params
                var sOldReceiver= JSON.stringify(MyApp.util.Utilities.arrayReciver);
                var sNewReceiver= JSON.stringify(arrayEmp);
                var sMessageInfo= JSON.stringify(arrayMessageInfo);
                var start = new Date().getTime();
                Ext.Ajax.request({
                    url: requestUrl,
                    method: 'post',
                    async: false,
                    params:{messageInfo:sMessageInfo,
                            newReceiver:sNewReceiver,
                            oldReceiver:sOldReceiver},
                    success: function(response, options){
                        Ext.getCmp('FrmAddMsg').setLoading(false);
                        //                 try {
                        var end = new Date().getTime();
                        var time = end - start;
                        console.debug('execute' , time);
                        var res = Ext.decode(response.responseText);
                        if(res.responseCode === 403){//authentication
                            MessageCommon.showErrorMessage(res.responseMessage);
                            Ext.getCmp('FrmAddMsg').setLoading(false);
                            return;
                        }
                        if(res.success===true){// insert message success

                            Ext.getStore('StTag').load({
                                callback : function(records, options, success) {
                                    if (success===false){
                                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                                        return;
                                    }
                                }
                            });
                            if(attachFileFlagle===true){// attach file
                                me.uploadFile(res.msgId,sReleaseDate,button.up('window')) ;// attach file

                            }else{// not attach file -insert message success


                                Ext.getCmp('FrmAddMsg').setLoading(false);
                                button.up('window').close();
                            }
                        }// insert message fail
                        else{
                            //                     button.up('window').setLoading(false);
                            MessageCommon.showMessageFail();
                            Ext.getCmp('FrmAddMsg').setLoading(false);
                        }
                        //                 } catch(err) {

                        //                     MessageCommon.showErrorMessage(MessageCommon.MesErrorExecute);
                        //                     Ext.getCmp('FrmAddMsg').setLoading(false);
                        //                 }
                    },
                    failure: function(response, options){

                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        Ext.getCmp('FrmAddMsg').setLoading(false);
                    }
                });
                //reload grid main
                if(MyApp.util.Utilities.frmMessageStatusAddNew===true){
                    new MyApp.controller.CFrmMain().grdMsgLoadWithExtraParam();
                }
                else{
                    var selectedrow = Ext.getCmp('grdMsg').getSelectionModel().getSelection()[0] ;
                    new MyApp.controller.CFrmMain().resetDetailMessage();
                    if(typeof(selectedrow) != 'undefined')
                        new MyApp.controller.CFrmMain().loadDetailMessage(selectedrow);
                }
            }

        }, 1);


    },

    pnlAddMsgAfterRender: function(component, eOpts) {
        var me = this; // me as current controller

        //reloadcircle base on user
        Ext.getStore('StCircleGroup').load({
            params: {empId:MyApp.util.Utilities.userEmpInfo.EMP_ID},
            callback : function(records, options, success) {
                if (success===false){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    return;
                }
            }
        });



        uploadComponent=Ext.getCmp('fileAttach');
        uploadComponent.fileInputEl.set({
            multiple:'multiple'
        });


        if(Ext.getStore('StFixedForm').getCount()=== 0){ // store FixedForm(msg template) did not load
            Ext.getStore('StFixedForm').load({
                callback : function(records, options, success) {
                    if (success===false){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return;
                    }else{
                        this.insert(0,{'VALUE':null,'TITLE':'---'});
                    }
                }
            });
        }


        Ext.getStore('StTag').load({
            callback : function(records, options, success) {
                if (success===false){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    return;
                }
            }
        });

        if(Ext.getStore('StCircleGroup').getCount()=== 0){ // store Circle_Group did not load
            Ext.getStore('StCircleGroup').load({
                callback : function(records, options, success) {
                    if (success===false){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return;
                    }
                }
            });
        }

        if(Ext.getStore('StGroup').getCount()=== 0){ // store StGroup did not load
            Ext.getStore('StGroup').load({
                callback : function(records, options, success) {
                    if (success===false){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return;
                    }
                }
            });
        }

        if(MyApp.util.Utilities.frmMessageStatusAddNew===true) { // adnew- set default

            // set default value for combobox partProgress
            if(Ext.getStore('StProgresses').getCount()>0){ // store Important   loaded
                var firtrowProgress = Ext.getCmp('cboMessagePartProgress').getStore().getAt(0).get('VALUE');
                Ext.getCmp('cboMessagePartProgress').setValue(firtrowProgress);
            }
            else{
                Ext.getStore('StProgresses').load({  // store Important loaded
                    callback : function(records, options, success) {
                        if (success) {
                            var firtrowProgress = Ext.getCmp('cboMessagePartProgress').getStore().getAt(0).get('VALUE');
                            Ext.getCmp('cboMessagePartProgress').setValue(firtrowProgress);
                        }
                    }
                });
            }

            // set default value for cboMessagePartImportant
            var firtrowProgress = Ext.getCmp('cboMessagePartImportant').getStore().getAt(0).get('VALUE');
            Ext.getCmp('cboMessagePartImportant').setValue(firtrowProgress);


            //-----------------------
            Ext.Ajax.request({
                url: apiUrl+'Master/GetCurrentDate',
                method: 'post',
                success: function(response, options){

                    var res = Ext.decode(response.responseText);
                    if(res.responseCode === 403){//authentication
                        MessageCommon.showErrorMessage(res.responseMessage);
                        return;
                    }

                    if(res.success===true)
                    {
                        // set ReleaseDate
                        var now = new Date(res.data);
                        currentTime = Ext.Date.format(now, 'Y/m/d');
                        Ext.getCmp('txtReleaseDate').setValue(currentTime);

                        // set defaultExpilationDate = yesterday
                        now.setDate(now.getDate() -1);
                        Ext.getCmp('dtpExpilationDate').setValue(now);
                        Ext.getCmp('cboMessagePartProgress').setDisabled(true);
                    }
                },
                failure: function(response, options){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });

            MyApp.util.Utilities.message.fileAttached ='';
            if(MyApp.util.Utilities.currentCircle!==null&& MyApp.util.Utilities.currentCircle!='-1')
            {
                this.setDefaultCircleForAddnew(MyApp.util.Utilities.currentCircle);
            }
        }
        else { // edit - Load message
            Ext.getCmp('cboFixedForm').setDisabled(true);
            if(MyApp.util.Utilities.messageId !== null && MyApp.util.Utilities.messageId !=="")
            {
                me.loadMessageInfo(MyApp.util.Utilities.messageId);
                me.loadMessageReceiver(MyApp.util.Utilities.messageId);

            }
        }



    },

    pnlAddMsgbeforeRender: function(component, eOpts) {
        // refresh treepanel Member data (keep struct)
            Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
                    child.set('checked', false);
             });
            Ext.getCmp('tpnMember').collapseAll();

        MyApp.util.Utilities.msgCircle = null;
        MyApp.util.Utilities.arrayReciver =  null;
    },

    pnAddMessageDestinationPartRender: function(component, eOpts) {
        component.add({xtype:'ucMessageDestinationPart'});

    },

    cboGroupChange: function(field, newValue, oldValue, eOpts) {
        var me = this;// me as current controller

        //Load emp in group
        var sGroupMemberMaster = Ext.getStore('StGroupMemberMaster');
        var arrayEmp = [];


        if (Ext.getStore('StGroupMemberMaster').getCount() > 0){ // store loaded
            sGroupMemberMaster.each(function(record,idx){
                if(record.get('GROUP_ID')==newValue){
                    arrayEmp.push(record.get('EMP_ID'));
                }
            });

            // set arrayEmp to tree view
            me.setSelectedMember(arrayEmp);
        }
        else{// store did not load
            Ext.getStore('StGroupMemberMaster').load({
                callback : function(records, options, success) {
                    if (success) {
                        sGroupMemberMaster.each(function(record,idx){
                            if(record.get('GROUP_ID')==newValue){
                                arrayEmp.push(record.get('EMP_ID'));
                            }
                        });

                        // set arrayEmp to tree view
                        me.setSelectedMember(arrayEmp);
                    }
                }
            });
        }









    },

    cboFixedFormChange: function(field, newValue, oldValue, eOpts) {

        if(Ext.getCmp('chkGroup').getValue()===false){
            Ext.getCmp('chkGroup').setValue(true);
        }


        var me = this;// me as current controller


        // refresh treepanel Member data (keep struct)
        Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
            child.set('checked', false);
        });
        Ext.getCmp('tpnMember').collapseAll();
        Ext.getCmp('txtMsgText').setValue('');

        if (newValue!==null){
            //load Message tempalte
            Ext.Ajax.request({
                url: apiUrl+'Message/loadFixedFormMsg',
                method: 'post',
                params:{
                    FixedFormId:newValue
                },
                success: function(response, options){

                    var res = Ext.decode(response.responseText);
                    if(res.responseCode === 403){//authentication
                        MessageCommon.showErrorMessage(res.responseMessage);
                        return;
                    }

                    if(res.success===true)
                    {
                        Ext.getCmp('txtMsgText').setValue(res.data.FORM_TEXT);
                    }
                },
                failure: function(response, options){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });


            //load Message tempalte receiver
            Ext.Ajax.request({
                url: apiUrl+'Message/loadFixedFormReciever',
                method: 'post',
                params:{
                    FixedFormId:newValue
                },
                success: function(response, options){
                    var res = Ext.decode(response.responseText);
                    if(res.responseCode === 403){//authentication
                        MessageCommon.showErrorMessage(res.responseMessage);
                        return;
                    }
                    if(res.success===true)
                    {
                        var arr = [];
                        for (var prop in res.data) {
                            arr.push(res.data[prop].EMP_ID);

                        }

                        me.setSelectedMember(arr);
                    }
                },
                failure: function(response, options){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });

        }
    },

    chkcircleCheckChange: function(field, newValue, oldValue, eOpts) {
        if(newValue===false & oldValue===true & Ext.getCmp('chkGroup').getValue()===false){
            Ext.getCmp('chkCircle').setValue(true);
        }
        if (newValue===true) {//  disabled tree view
            Ext.getCmp('chkGroup').setValue(false);
            Ext.getCmp('cboCircle').setDisabled(false);
            Ext.getCmp('cboGroup').setDisabled(true);
            Ext.getCmp('tpnMember').setDisabled(true);

            Ext.getCmp('cboGroup').setValue('');

            Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
               child.set('checked', false);
            });
            Ext.getCmp('tpnMember').collapseAll();

        }
    },

    chkGroupCheckChange: function(field, newValue, oldValue, eOpts) {
        if(newValue===false & oldValue===true & Ext.getCmp('chkCircle').getValue()===false){
            Ext.getCmp('chkGroup').setValue(true);
        }
        if (newValue===true){
            Ext.getCmp('chkCircle').setValue(false);
            Ext.getCmp('cboCircle').setValue('');
            Ext.getCmp('cboCircle').setDisabled(true);
            Ext.getCmp('cboGroup').setDisabled(false);

            Ext.getCmp('tpnMember').setDisabled(false);

        }


    },

    fieldChange: function(filefield, value, eOpts) {
        var me = this,
            upload = Ext.getCmp('fileAttach').fileInputEl.dom,
            files = upload.files,
            names = [];

        if (files) {
            for (var i = 0; i < files.length; i++)
                names.push(files[i].name);
            listValue = names.join(', ');
        }


        Ext.getCmp('txtFileAttach').setValue(listValue);
    },

    frmAddMsgClose: function(panel, eOpts) {
        MyApp.util.Utilities.openedForm=false;
    },

    setSelectedMember: function(arrayEmp) {
        var me=this;
        //set selected member for treeview member
        setMember();

        function setMember(){
            var cloneArrayEmp = arrayEmp.slice(0);//do not do this arrayEmp is global
            Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
                var index = cloneArrayEmp.indexOf(child.get('id'));
                if(index != -1){
                    child.set("checked",true);
                    new MyApp.controller.CucTreeMember().checkParentNode(child);
                    me.expandParentsNode(child);
                    cloneArrayEmp.splice(index, 1);
                }

            });
        }



    },

    expandParentsNode: function(node) {


        if(node.parentNode!==null){
            node.expand(false);
            this.expandParentsNode(node.parentNode);
        }



    },

    loadMessageInfo: function(msgID) {

        Ext.Ajax.request({
            url: apiUrl+'Message/LoadMessageInfo',
            method: 'post',
            params:{
                msgID:msgID
            },
            success: function(response, options){
                var res = Ext.decode(response.responseText);
                if(res.responseCode === 403){//authentication
                    MessageCommon.showErrorMessage(res.responseMessage);
                    return;
                }
                Ext.getCmp('txtMsgTitle').setValue(res.data.MSG_TITLE);
                Ext.getCmp('txtMsgText').setValue(res.data.MSG_TEXT);
                Ext.getCmp('cboTag').setValue(res.data.TAG);
                Ext.getCmp('cboMessagePartImportant').setValue(res.data.IMPORTANT_LEVEL);

                if(Ext.getStore('StProgresses').getCount()>0)
                {
                    Ext.getCmp('cboMessagePartProgress').setValue(res.data.PROGRESS_ID);
                }else
                {
                    Ext.getStore('StProgresses').load({
                        callback : function(records, options, success) {
                            if (success) {
                                Ext.getCmp('cboMessagePartProgress').setValue(res.data.PROGRESS_ID);
                            }
                        }
                    });
                }
                Ext.getCmp('txtMsgText').setValue(res.data.MSG_TEXT);
                Ext.getCmp('txtReleaseDate').setValue(res.data.RELEASE_DATE);
                var expilationDate = new Date(res.data.EXPILATION_DATE);
                Ext.getCmp('dtpExpilationDate').setValue(expilationDate);

                if(res.data.FILEATTACH!==''){
                    //Ext.getCmp('txtFileAttach').setValue(res.data.FILEATTACH);
                    MyApp.util.Utilities.message.fileAttached = res.data.FILEATTACH;

                    //Ext.form.field.File.superclass.setValue.call(Ext.getCmp('fileAttach'), res.data.FILEATTACH);
                }else{
                    MyApp.util.Utilities.message.fileAttached ='';
                }
            },
            failure: function(response, options){
                Ext.MessageBox.show({
                    title: MessageCommon.ErrTitle,
                    msg:MessageCommon.MesErrorServerFail,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });
    },

    loadMessageReceiver: function(msgID) {


        if(Ext.getCmp('FrmAddMsg'))
        {
            Ext.getCmp('FrmAddMsg').setLoading(true);
        }

        var me= this;
        var sCircle ='';

        //Load message Circle
        Ext.Ajax.request({
            url: apiUrl+'Message/loadMessageCircle',
            method: 'post',
            params:{
                msgID:msgID
            },
            success: function(response, options){
                var res = Ext.decode(response.responseText);
                if(res.responseCode === 403){//authentication
                    MessageCommon.showErrorMessage(res.responseMessage);
                    return;
                }
                if(res.success===true)
                {
                    sCircle=res.data.CIRCLE_ID;

                    Ext.getCmp('chkGroup').setValue(false);
                    Ext.getCmp('chkCircle').setValue(true);
                    if(Ext.getStore('StCircleGroup').getCount()>0){
                        Ext.getCmp('cboCircle').setValue(sCircle);
                    }
                    else{
                        Ext.getStore('StCircleGroup').load({
                            callback : function(records, options, success) {
                                if (success) {
                                    Ext.getCmp('cboCircle').setValue(sCircle);
                                }
                            }
                        });
                    }

                }
                loadSetReceiver();
            },
            failure: function(response, options){
                Ext.MessageBox.show({
                    title: MyApp.app.Messages.ErrTitle,
                    msg: MyApp.app.Messages.MesErrorServerFail,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });


        function loadSetReceiver()
        {
            Ext.Ajax.request({
                url: apiUrl+'main/loadEmloyeeForMessage',
                method: 'post',
                params:{
                    msgID:msgID
                },
                success: function(response, options){
                    var res = Ext.decode(response.responseText);
                    if(res.responseCode === 403){//authentication
                        MessageCommon.showErrorMessage(res.responseMessage);
                        return;
                    }

                    var arr = [];//arrayReciver
                    for (var prop in res.data) {
                        arr.push(res.data[prop].EMP_ID);
                    }
                    MyApp.util.Utilities.arrayReciver=arr;
                    if(sCircle==='') {//not chose Circle
                        me.setSelectedMember(arr);
                    }else{
                        MyApp.util.Utilities.msgCircle=sCircle;
                    }
                    if(Ext.getCmp('FrmAddMsg'))
                    {
                        Ext.getCmp('FrmAddMsg').setLoading(false);
                    }
                },
                failure: function(response, options){
                    Ext.MessageBox.show({
                        title: MessageCommon.ErrTitle,
                        msg: MessageCommon.MesErrorServerFail,
                        icon: Ext.MessageBox.ERROR
                    });
                }
            });
        }
    },

    formInputCheck: function(arrayEmp) {


        if(Ext.getCmp('txtMsgTitle').getValue()===''){
            MessageCommon.showErrorMessageForcus(MessageCommon.InputMsgTitle,'txtMsgTitle');
            return false;
        }
        if(Ext.getCmp('txtMsgText').getValue()===''){
            MessageCommon.showErrorMessageForcus(MessageCommon.InputMsgText,'txtMsgText');
            return false;
        }

        if(MyApp.util.Utilities.frmMessageStatusAddNew===true){
            if(Ext.getCmp('dtpExpilationDate').getValue() < MyApp.app.common.GetCurrentDate()){
                MessageCommon.showErrorMessageForcus(MessageCommon.InvalidExpilationDate,'dtpExpilationDate');
                return false;
            }
        }

        if(arrayEmp.length===0||arrayEmp===null)
        {
            MessageCommon.showErrorMessage(MessageCommon.InvalidEmp);//MessageCommon.InvalidEmp
            return false;
        }


        return true;
    },

    setDefaultCircleForAddnew: function(circleId) {


        Ext.getCmp('chkGroup').setValue(false);
        Ext.getCmp('chkCircle').setValue(true);

        if(Ext.getStore('StCircleGroup').getCount()>0){
            Ext.getCmp('cboCircle').setValue(circleId);
        }
        else{
            Ext.getStore('StCircleGroup').load({
                callback : function(records, options, success) {
                    if (success) {
                        Ext.getCmp('cboCircle').setValue(circleId);
                    }
                }
            });
        }

    },

    uploadFile: function(messageId, releaseDate, window) {



        var form = Ext.getCmp('pnlAddMsg');
        console.log(Global.authData.sessionID);
        if(form.isValid()){
            form.getForm().submit({
                params:{
                    messageId:messageId,releaseDate:releaseDate,
                    token: MyApp.util.Utilities.token,
                    sessionID: MyApp.util.Utilities.sessionID
                },
                async: false,
                url: apiUrl+'message/UpLoadFile',
                waitMsg: 'Uploading...',
                success: function(response, options){
                    try {

                        var res = Ext.decode(options.response.responseText);
                        //setTimeout(setMultiselection, 5000);
                        if(res.responseCode === 403){//authentication
                            MessageCommon.showErrorMessage(res.responseMessage);
                            return;
                        }
                        if(res.success===true){
                            window.close();
                        }
                        else{
                            MessageCommon.showInfoMessage(res.error);
                            window.close();
                        }
                    } catch(err) {
                        MessageCommon.showInfoMessage('作業できましたが、ファイルをアップロードできません。');
                        window.close();
                    }
                },
                failure: function(response, options){
                    MessageCommon.showInfoMessage('作業できましたが、ファイルをアップロードできません。');
                    window.close();
                }
            });
        }

        function setMultiselection(){
            component.fileInputEl.set({
                multiple:'multiple'
            });
        }
    },

    init: function(application) {
        this.control({
            "#btnCloseAddMsg": {
                click: this.btnCloseFrmAddMsgClick
            },
            "#btnSave": {
                click: this.btnSaveClick
            },
            "#pnlAddMsg": {
                afterrender: this.pnlAddMsgAfterRender,
                beforerender: this.pnlAddMsgbeforeRender
            },
            "#pnAddMessageDestinationPart": {
                afterrender: this.pnAddMessageDestinationPartRender
            },
            "#cboGroup": {
                change: this.cboGroupChange
            },
            "#cboFixedForm": {
                change: this.cboFixedFormChange
            },
            "#chkCircle": {
                change: this.chkcircleCheckChange
            },
            "#chkGroup": {
                change: this.chkGroupCheckChange
            },
            "filefield": {
                change: this.fieldChange
            },
            "#FrmAddMsg": {
                close: this.frmAddMsgClose
            }
        });
    }

});
