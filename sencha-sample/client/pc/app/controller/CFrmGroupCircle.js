/*
 * File: app/controller/CFrmGroupCircle.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CFrmGroupCircle', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'tpnMember',
            selector: '#tpnMember'
        },
        {
            ref: 'tvwMember',
            selector: '#tvwMember'
        },
        {
            ref: 'pnlMovedMember',
            selector: '#pnlMovedMember'
        },
        {
            ref: 'rgrRole',
            selector: '#rgrRole'
        },
        {
            ref: 'txtGroupCircle',
            selector: '#txtGroupCircle'
        }
    ],

    btnCloseClick: function(button, e, eOpts) {
        button.up('window').close();
    },

    btnMoveMemberClick: function(button, e, eOpts) {
        var tpnMember = this.getTpnMember();

        var pnlMovedMember = this.getPnlMovedMember();

        var arrMember = [];

        var arrStaff_Id = [];


        var hasCurrentUser=false;// use to check user uncheck it safe




        loopNode = function(n){
            if(n.hasChildNodes())
            {
                n.eachChild(loopNode);
            }
            else
            {
                // Get info checked member
                if(n.get('checked'))
                {
                    var person = {id: n.get('id'), name: n.get('name')};
                    arrMember.push(person);

                    if(n.get('id')===MyApp.util.Utilities.userEmpInfo.EMP_ID.toString()){
                        hasCurrentUser=true;

                    }
                }
            }
        };


        tpnMember.getView().node.eachChild(function(n) {
            if(n.hasChildNodes())
            {
                n.eachChild(loopNode);
            }
        });

        //alert(hasCurrentUser);
        if(hasCurrentUser===false){
            Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
                if (child.get('id')==MyApp.util.Utilities.userEmpInfo.EMP_ID)
                {
                    child.set("checked",true);
                    new MyApp.controller.CFrmAddMsg().expandParentsNode(child);
                }
            });
            arrMember = [];
            tpnMember.getView().node.eachChild(function(n) {
                if(n.hasChildNodes())
                {
                    n.eachChild(loopNode);
                }
            });

        }

        // get arr obj combobox member
        var arrCmb = Ext.ComponentQuery.query("#cmbRoleMember");



        var arrayCurenrtChose=[];

        for(i = 0; i<arrCmb.length;i++)
        {
            var staff_id = arrCmb[i].id.replace("cmbRoleMember", "");

            var staff = {staff_id: staff_id, role: arrCmb[i].value};
            arrayCurenrtChose.push(staff);
        }

        // add component member
        this.getPnlMovedMember().removeAll();

        for(i = 0;i< arrMember.length;i++)
        {
            // get value radio role
            var valueRole = this.getRgrRole().getChecked()[0].inputValue;
            var defaultCorlor = '#0000CE';
            for (k=0;k<arrayCurenrtChose.length;k++){

                if(arrayCurenrtChose[k].staff_id==arrMember[i].id){
                    valueRole=arrayCurenrtChose[k].role;
                    break;
                }
            }



            if(MyApp.util.Utilities.currentCircleMember!==null){
                for (j=0;j<MyApp.util.Utilities.currentCircleMember.length;j++){
                    if(arrMember[i].id==MyApp.util.Utilities.currentCircleMember[j]){
                        defaultCorlor='#FFFFFF';
                        break;
                    }
                }
            }


            // Crete combobox Member
            idCombobox = 'cmbRoleMember' + arrMember[i].id;

            var combobox = Ext.create('Ext.form.field.ComboBox',  {
                xtype: 'combobox',
                width: 220,
                labelSeparator: '',
                itemId: 'cmbRoleMember',
                id: idCombobox,
                store: {
                    fields: ['key', 'value'],
                    data: [
                        { "key": "1", "value": "管理者" },
                        { "key": "2", "value": "メンバー" },
                        { "key": "3", "value": "閲覧のみ" }
                    ]
                },
                displayField: 'value',
                valueField: 'key',
                editable: false,
                value: valueRole,
                style: {'background-color':defaultCorlor},
                fieldLabel: arrMember[i].name
            });


            // Create button remove
            idButton = 'btnRemoveMember' + arrMember[i].id;
            var button = Ext.create('Ext.button.Button',{
                xtype: 'button',
                width: 40,
                text: 'X',
                id: idButton,
                handler: function(button, e) {
                    //get id member (staff_id)

                    var id = button.id.replace("btnRemoveMember", "");
                    if(id==MyApp.util.Utilities.userEmpInfo.EMP_ID)
                    {
                        return;
                    }
                    tpnMember.getView().node.eachChild(function(n) {

                        loopNode = function(n){
                            if(n.hasChildNodes())
                            {
                                n.eachChild(loopNode);
                            }
                            else
                            {
                                //
                                if(n.get('id') == id)
                                {
                                    n.set('checked',false);
                                    new MyApp.controller.CucTreeMember().tvwMemberCheckChange(n,false);
                                }
                            }
                        };
                        if(n.hasChildNodes())
                        {
                            n.eachChild(loopNode);
                        }
                    });

                    //Remove component member
                    var idContainer = button.id.replace("btnRemoveMember", "ctnConMember");
                    Ext.getCmp(idContainer).destroy();
                }
            });



            if( arrMember[i].id.toString()==MyApp.util.Utilities.userEmpInfo.EMP_ID.toString()){
                combobox.setValue('1');
                combobox.setReadOnly(true);
                button.setDisabled(true);
            }

            // Create container added combobox, button
            idContainer = 'ctnConMember' + arrMember[i].id;
            var container = Ext.create('Ext.Container',{
                xtype: 'container',
                margin: '1 0 0 0',
                layout: 'column',
                id: idContainer,
                items: [combobox,button]
            });
            this.getPnlMovedMember().add(container);
        }

    },

    frmGroupCircleAfterrender: function(component, eOpts) {
        //console.log(Ext.getStore('StMMembers').isLoading());
        // refresh treepanel Member data (keep struct)
        var me = this;

        var tpnMember = this.getTpnMember();
        tpnMember.getView().node.cascadeBy(function(child){
            child.set('checked', false);
        });

        var flagSeted =false;



        if(flagSeted===false){
            Ext.getStore('StCircleGroupEdit').load({
                params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID},
                async: false,
                callback : function(records, options, success) {
                    if (success===false){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return;
                    }else{
                        Ext.getCmp('cboCircleName'). setRawValue('')  ;
                        me.setDefaulfMember();
                    }
                }
            });
        }







    },

    btnSaveCircleClick: function(button, e, eOpts) {
        Ext.getCmp('btnSaveCircle').setDisabled(true);

        var group_name = this.getTxtGroupCircle().getValue();
        var arrStaff = [];

        // validate group
        if(Ext.util.Format.trim(group_name)==='')
        {
            MessageCommon.showErrorMessageForcus(MessageCommon.MesErrorInputCircle, 'txtGroupCircle');
            Ext.getCmp('btnSaveCircle').setDisabled(false);
            return;
        }

        // get arr obj combobox member
        var arrCmb = Ext.ComponentQuery.query("#cmbRoleMember");

        // validate member
        if(arrCmb.length<2)
        {
            MessageCommon.showErrorMessage(MessageCommon.MesErrorInputMember);
            Ext.getCmp('btnSaveCircle').setDisabled(false);
            return;
        }


        for(i = 0; i<arrCmb.length;i++)
        {
            var staff_id = arrCmb[i].id.replace("cmbRoleMember", "");
            var editable= 0;

            if(staff_id=== MyApp.util.Utilities.userEmpInfo.EMP_ID){
                editable=1;
            }

            var staff = {staff_id: staff_id, role: arrCmb[i].value,editable:editable};
            arrStaff.push(staff);
        }

        // data partse to json
        jsonStaff = JSON.stringify(arrStaff);

        if(Ext.getCmp('rdoAddNew').getValue()===true)
        {
            var url = apiUrl+'circle/InsertGroupCricle';

        }else{
            var url = apiUrl+'circle/UpdateGroupCricle';
            if(Ext.getCmp('cboCircleName').getValue()===null){
                MessageCommon.showErrorMessage(MessageCommon.ChoseCircle);
                Ext.getCmp('btnSaveCircle').setDisabled(false);
                return;
            }
        }

        Ext.Ajax.request({
            params: {JsonStaff: jsonStaff,Group_Name:group_name,GroupId:Ext.getCmp('cboCircleName').getValue()},    // Data json transfer to server
            url: url,
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result.responseCode === 403){
                    MessageCommon.showErrorMessage(result.responseMessage);
                    return;
                }
                if(result == "false")		// Has error at server
                {
                    Ext.MessageBox.alert(MessageCommon.ErrTitle, MessageCommon.MesErrorAtServer);
                    Ext.getCmp('btnSaveCircle').setDisabled(false);
                }else{
                    //reload store Circle_Group
                    Ext.getStore('StCircleGroup').load({
                        callback : function(records, options, success) {
                            if (success===false){
                                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                                Ext.getCmp('btnSaveCircle').setDisabled(false);
                                return;
                            }
                        }
                    });
                    Ext.getStore('StCircleGroupTree').load( {params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});
                    Ext.getStore('StCircleMemberMaster').load();
                    Ext.getStore('StCircleMemberRole').load();
                    Ext.getStore('StCircleGroupEdit').load({
                        params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});

                    button.up('window').close();

                }
            },
            failure: function () {
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });

    },

    frmGroupCircleClose: function(panel, eOpts) {
        MyApp.util.Utilities.currentCircleMember=null;
        MyApp.util.Utilities.openedForm=false;
        this.getTpnMember().collapseAll();
    },

    cboCircleNameChange: function(field, newValue, oldValue, eOpts) {
        if(newValue!==null){
            if(newValue!='0'){ // 0 is addnew status ondatabase
                Ext.getCmp('txtGroupCircle').setValue(Ext.getCmp('cboCircleName').getRawValue());
            }else{
                Ext.getCmp('txtGroupCircle').setValue('');
            }

            Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
                child.set('checked', false);
            });
            this.getPnlMovedMember().removeAll();
            this.setStaticMember(newValue);

             Ext.getCmp('btnDelete').setDisabled(false);
        }
    },

    rdoAddNewChange: function(field, newValue, oldValue, eOpts) {

        if(newValue===true){
            MyApp.util.Utilities.currentCircleMember=null;
            Ext.getCmp('cboCircleName').setDisabled(true);
            Ext.getCmp('cboCircleName'). setRawValue('')  ;
            Ext.getCmp('txtGroupCircle').setValue('');

            var tpnMember = this.getTpnMember();
            //tpnMember.collapseAll();

            tpnMember.getView().node.cascadeBy(function(child){
                child.set('checked', false);
            });
            this.getPnlMovedMember().removeAll();
            this.setDefaulfMember();
            Ext.getCmp('btnDelete').setDisabled(true);

        }


    },

    rdoEditChange: function(field, newValue, oldValue, eOpts) {
        if(newValue===true){
            Ext.getCmp('cboCircleName').setValue(null);

            Ext.getCmp('cboCircleName').setDisabled(false);
            var oldValueCircleName = Ext.getCmp('cboCircleName').getValue();

            var firtrow ='';
            if(Ext.getCmp('cboCircleName').getStore().getCount()>0){
                firtrow = Ext.getCmp('cboCircleName').getStore().getAt(0).get('VALUE');
                Ext.getCmp('cboCircleName').setValue(firtrow);
            }

        }

    },

    btnDeleteClick: function(button, e, eOpts) {

        if(Ext.getCmp('cboCircleName').getValue()===null){
            MessageCommon.showErrorMessage(MessageCommon.ChoseCircle);
            return;
        }
        Ext.Msg.confirm('確かめる', '本当に削除しますか？', function(btn, text){
            if (btn == 'yes')
            {
                Ext.getCmp('btnDelete').setDisabled(true);

                Ext.Ajax.request({
                    params: {circle_id:Ext.getCmp('cboCircleName').getValue() },    // Data json transfer to server
                    url: apiUrl+'circle/DeleteCricle',
                    success: function (resp) {
                        var result = JSON.parse(resp.responseText);  // Parse data return
                        if(result.responseCode === 403){
                            MessageCommon.showErrorMessage(result.responseMessage);
                            return;
                        }
                        if(result == "false")		// Has error at server
                        {
                            Ext.MessageBox.alert(MessageCommon.ErrTitle, MessageCommon.MesErrorAtServer);
                            Ext.getCmp('btnDelete').setDisabled(false);
                        }else{
                            //reload store Circle_Group
                            Ext.getStore('StCircleGroup').load({
                                callback : function(records, options, success) {
                                    if (success===false){
                                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                                        Ext.getCmp('btnDelete').setDisabled(false);
                                        return;
                                    }
                                }
                            });
                            Ext.getStore('StCircleGroupTree').load( {params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});
                            Ext.getStore('StCircleMemberMaster').load();
                            Ext.getStore('StCircleGroupEdit').load({
                                params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});
                            button.up('window').close();

                        }
                    },
                    failure: function () {
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    }
                });
            }
        });



    },

    setStaticMember: function(circleId) {



        var arrMember = [];
        var tpnMember = this.getTpnMember();
        var pnlMovedMember = this.getPnlMovedMember();
        var arrStaff_Id = [];
        var me = this;
        var StCircleMemberRole = Ext.getStore('StCircleMemberRole');
        if(StCircleMemberRole.getCount()===0){ //store StCircleMemberRole not load
            StCircleMemberRole.load({
                callback : function(records, options, success) {
                    if (success) {
                        StCircleMemberRole.each(function(record,idx){
                            console.log(record);
                            if(record.get('CIRCLE_ID')==circleId){
                                var staff = {id: record.get('EMP_ID'), name:record.get('EMP_NAME'), role:record.get('ROLE')};
                                arrMember.push(staff);
                                arrStaff_Id.push(record.get('EMP_ID'));

                            }
                        });
                        setMember();
                    }else {
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return;
                    }
                }
            });
        }else{
            StCircleMemberRole.each(function(record,idx){
                console.log(record);
                if(record.get('CIRCLE_ID')==circleId){
                    var staff = {id: record.get('EMP_ID'), name:record.get('EMP_NAME'), role:record.get('ROLE')};
                    arrMember.push(staff);
                    arrStaff_Id.push(record.get('EMP_ID'));

                }

            });
            setMember();
        }

        function setMember(){
            console.log(arrMember);

            MyApp.util.Utilities.currentCircleMember=arrStaff_Id;

            new MyApp.controller.CFrmAddMsg().setSelectedMember(arrStaff_Id);



            for(i = 0;i< arrMember.length;i++)
            {
                // Crete combobox Member
                idCombobox = 'cmbRoleMember' + arrMember[i].id;

                var combobox = Ext.create('Ext.form.field.ComboBox',  {
                    xtype: 'combobox',
                    width: 220,
                    labelSeparator: '',
                    itemId: 'cmbRoleMember',
                    id: idCombobox,
                    store: {
                        fields: ['key', 'value'],
                        data: [
                            { "key": "1", "value": "管理者" },
                            { "key": "2", "value": "メンバー" },
                            { "key": "3", "value": "閲覧のみ" }
                        ]
                    },
                    displayField: 'value',
                    valueField: 'key',
                    editable: false,
                    value: arrMember[i].role,
                    fieldLabel: arrMember[i].name
                });


                // Create button remove
                idButton = 'btnRemoveMember' + arrMember[i].id;
                var button = Ext.create('Ext.button.Button',{
                    xtype: 'button',
                    width: 40,
                    text: 'X',
                    id: idButton,
                    handler: function(button, e) {
                        //get id member (staff_id)

                        var id = button.id.replace("btnRemoveMember", "");
                        if(id==MyApp.util.Utilities.userEmpInfo.EMP_ID)
                        {
                            return;
                        }
                        tpnMember.getView().node.eachChild(function(n) {

                            loopNode = function(n){
                                if(n.hasChildNodes())
                                {
                                    n.eachChild(loopNode);
                                }
                                else
                                {
                                    //
                                    if(n.get('id') == id)
                                    {
                                        n.set('checked',false);
                                        new MyApp.controller.CucTreeMember().tvwMemberCheckChange(n,false);
                                    }
                                }
                            };
                            if(n.hasChildNodes())
                            {
                                n.eachChild(loopNode);
                            }
                        });

                        //Remove component member
                        var idContainer = button.id.replace("btnRemoveMember", "ctnConMember");
                        Ext.getCmp(idContainer).destroy();
                    }
                });

                if( arrMember[i].id==MyApp.util.Utilities.userEmpInfo.EMP_ID){
                    combobox.setValue('1');
                    combobox.setReadOnly(true);
                    button.setDisabled(true);
                }

                // Create container added combobox, button
                idContainer = 'ctnConMember' + arrMember[i].id;
                var container = Ext.create('Ext.Container',{
                    xtype: 'container',
                    margin: '1 0 0 0',
                    layout: 'column',
                    id: idContainer,
                    items: [combobox,button]
                });
                me.getPnlMovedMember().add(container);
            }
        }


    },

    setDefaulfMember: function() {

        var task = Ext.create('Ext.util.DelayedTask', function() {
            Ext.getCmp('tpnMember').getView().node.cascadeBy(function(child){
                if (child.get('id')==MyApp.util.Utilities.userEmpInfo.EMP_ID)
                {
                    child.set("checked",true);
                    new MyApp.controller.CFrmAddMsg().expandParentsNode(child);
                }
            });
            new MyApp.controller.CFrmGroupCircle().btnMoveMemberClick();
        }, this);
        if(Ext.getStore('StMMembers').isLoading())
        {
            task.delay(1000);

        }else{
            task.delay(0);
        }
    },

    init: function(application) {
        this.control({
            "#btnClose": {
                click: this.btnCloseClick
            },
            "#btnMoveMember": {
                click: this.btnMoveMemberClick
            },
            "#frmGroupCircle": {
                afterrender: this.frmGroupCircleAfterrender,
                close: this.frmGroupCircleClose
            },
            "#btnSaveCircle": {
                click: this.btnSaveCircleClick
            },
            "#cboCircleName": {
                change: this.cboCircleNameChange
            },
            "#rdoAddNew": {
                change: this.rdoAddNewChange
            },
            "#rdoEdit": {
                change: this.rdoEditChange
            },
            "#btnDelete": {
                click: this.btnDeleteClick
            }
        });
    }

});
