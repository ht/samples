/*
 * File: app/controller/CFrmMain.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CFrmMain', {
    extend: 'Ext.app.Controller',
    alias: 'controller.CFrmMain',

    id: 'CFrmMain',

    refs: [
        {
            ref: 'cboMessageStatus',
            selector: '#cboMessageStatus'
        },
        {
            ref: 'grdMsg',
            selector: '#grdMsg'
        },
        {
            ref: 'frmMain',
            selector: '#frmMain'
        },
        {
            ref: 'grdMsgComment',
            selector: '#grdMsgComment'
        },
        {
            ref: 'grdMsgFlag',
            selector: '#grdMsgFlag'
        },
        {
            ref: 'lblEmpName',
            selector: '#lblEmpName'
        },
        {
            ref: 'lblReleaseDate',
            selector: '#lblReleaseDate'
        },
        {
            ref: 'lblProgress',
            selector: '#lblProgress'
        },
        {
            ref: 'lblImportant',
            selector: '#lblImportant'
        },
        {
            ref: 'lblMsgTitle',
            selector: '#lblMsgTitle'
        },
        {
            ref: 'txtMsg',
            selector: '#txtMsg'
        },
        {
            ref: 'btnAttach',
            selector: '#btnAttach'
        },
        {
            ref: 'btnFavorite',
            selector: '#btnFavorite'
        },
        {
            ref: 'txtComment',
            selector: '#txtComment'
        },
        {
            ref: 'btnAddComment',
            selector: '#btnAddComment'
        },
        {
            ref: 'btnConfirm',
            selector: '#btnConfirm'
        },
        {
            ref: 'btnEditMessage',
            selector: '#btnEditMessage'
        },
        {
            ref: 'tpnCircleGroup',
            selector: '#tpnCircleGroup'
        },
        {
            ref: 'btnTheme',
            selector: '#btnTheme'
        },
        {
            ref: 'btnWork',
            selector: '#btnWork'
        },
        {
            ref: 'btnCircle',
            selector: '#btnCircle'
        }
    ],

    btnMainAddMsgClick: function(button, e, eOpts) {
        MyApp.util.Utilities.frmMessageStatusAddNew=true;
        var frmAddMsg = Ext.create('MyApp.view.FrmAddMsg');
        //console.log(frmAddMsg);
        frmAddMsg.show();
        MyApp.util.Utilities.openedForm=true;
    },

    btnTagSearchClick: function(button, e, eOpts) {
        this.grdMsgLoadWithExtraParam();
    },

    ctxMenuClick: function(menu, item, e, eOpts) {
        if(item===undefined)
        {
            return;
        }
        btnFavorite=this.getBtnFavorite();
        if(item.getId()=='menuItemAddFavorite'){
            Ext.getCmp('ctxMenu').setVisible(false);
            Ext.Ajax.request({
                method: 'POST',
                url: apiUrl + 'main/updateFavorite',
                params: {msgID: MyApp.util.Utilities.message.get('MSG_ID'), status: 1},
                success: function(data){
                    var obj = Ext.decode(data.responseText);
                    if(obj.responseCode === 403){
                        MessageCommon.showErrorMessage(obj.responseMessage);
                    }else{
                        if(obj.success === true){
                            var dispStatus = MyApp.util.Utilities.message.get('DISP_STATUS');
                            MyApp.util.Utilities.message.set('DISP_STATUS', dispStatus.substr(0, 2) + '1');
                            btnFavorite.setIcon('resources/images/s_release.ico');
                            btnFavorite.renderData.tag = 1;
                            MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                        }else{
                            MessageCommon.showErrorMessage(MessageCommon.UpdateFail);
                        }
                    }
                },
                failure: function(error){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });
        }



        if(item.getId()=='menuItemDeleteFavorite'){
            Ext.getCmp('ctxMenu').setVisible(false);
            Ext.Ajax.request({
                method: 'POST',
                url: apiUrl + 'main/updateFavorite',
                params: {msgID: MyApp.util.Utilities.message.get('MSG_ID'), status: 0},
                success: function(data){
                    var obj = Ext.decode(data.responseText);
                    if(obj.responseCode === 403){
                        MessageCommon.showErrorMessage(obj.responseMessage);
                    }else{
                        if(obj.success === true){
                            var dispStatus = MyApp.util.Utilities.message.get('DISP_STATUS');
                            MyApp.util.Utilities.message.set('DISP_STATUS', dispStatus.substr(0, 2) + '0');
                            btnFavorite.setIcon('resources/images/s_favorite.ico');
                            btnFavorite.renderData.tag = 0;
                            MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                        }else{
                            MessageCommon.showErrorMessage(MessageCommon.UpdateFail);
                        }
                    }
                },
                failure: function(error){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });
        }



    },

    ctxMenuMouseLeave: function(menu, e, eOpts) {
        Ext.getCmp('ctxMenu').setVisible(false);
    },

    menuItemChangeStatusMouseLeave: function(menu, e, eOpts) {
        Ext.getCmp('menuItemChangeStatus').setVisible(false);
    },

    btnMainScheduleClick: function(button, e, eOpts) {
        // Open window contact
        //wdContact = window.open("../pcSchedule/","","top = 0, left = 0, width=100%,height=100%");
        MyApp.app.common.openNewWindow("schedule", "Schedule", 1276, 650);
    },

    bttnMainSearchMsgClick: function(button, e, eOpts) {
        MyApp.util.Utilities.openedForm=true;

        if(Ext.getCmp('FrmSearchMsg'))
        {
            Ext.getCmp('FrmSearchMsg').show();
        }
        else
        {
            var frmSearchMsg = Ext.create('MyApp.view.FrmSearchMsg');
            frmSearchMsg.modal = true;
            frmSearchMsg.show();
        }
    },

    btnWorkClick: function(button, e, eOpts) {
        MyApp.util.Utilities.openedForm=true;

        // get info
        Work.getWorkInfo(MyApp.util.Utilities.userEmpInfo.EMP_ID);

        var frmWork = Ext.create('MyApp.view.FrmWork');
        frmWork.show();


    },

    btnCircleClick: function(button, e, eOpts) {
        MyApp.util.Utilities.openedForm=true;
        var frmGroupCircle = Ext.create('MyApp.view.FrmGroupCircle');
        frmGroupCircle.show();

    },

    btnQuickSearchClick: function(button, e, eOpts) {
        if(Ext.getCmp('pnlSearch').hidden===true){
            Ext.getCmp('pnlSearch').show();
            button.setIcon('resources/images/upicon.ico');
        }
        else{
            Ext.getCmp('pnlSearch').hide();
            button.setIcon('resources/images/downicon.ico');
        }





    },

    grdMsgItemDblClick: function(dataview, record, item, index, e, eOpts) {

        if(MyApp.util.Utilities.userEmpInfo.EMP_ID == record.get('ADD_EMP_ID')||MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE ){
            MyApp.util.Utilities.frmMessageStatusAddNew = false;
            MyApp.util.Utilities.messageId = record.get('MSG_ID');
            var frmAddMsg = Ext.create('MyApp.view.FrmAddMsg');
            frmAddMsg.modal = true;
            frmAddMsg.title='メッセージの作成と編集 (編集)';
            frmAddMsg.show();
        }
    },

    btnEditMessageClick: function(button, e, eOpts) {
        MyApp.util.Utilities.frmMessageStatusAddNew=false;
        var frmAddMsg = Ext.create('MyApp.view.FrmAddMsg');
        frmAddMsg.modal = true;
        frmAddMsg.title='メッセージの作成と編集 (編集)';
        frmAddMsg.show();



    },

    cboMessageTypeChange: function(field, newValue, oldValue, eOpts) {
        var cboMessageStatus = this.getCboMessageStatus();
        var store = cboMessageStatus.getStore();
        store.clearFilter(true);
        store.filter('PARENT', newValue);
        if(newValue == -1){
            cboMessageStatus.setValue('');
        }else{
            if(cboMessageStatus.getStore().getCount() > 0)
                cboMessageStatus.setValue(cboMessageStatus.getStore().getAt(0).get('MSG_STATUS_VALUE'));
            cboMessageStatus.setReadOnly(true);
            cboMessageStatus.setEditable(false);
            if('' !== newValue && null !== newValue && -1 !== newValue){
                cboMessageStatus.setReadOnly(false);
            }
        }
    },

    cboMessageStatusChange: function(field, newValue, oldValue, eOpts) {
        this.grdMsgLoadWithExtraParam();
    },

    grdMsgAfterRender: function(component, eOpts) {
        //After Msg gridview is render and store is loaded
        //then focus on first row and load detail for this first row.
        var grdMsg = this.getGrdMsg();
        var me = this;//Using this in callback function
        grdMsg.getStore().on("load", function(){
            var record = grdMsg.getStore().getAt(0);
            if(typeof(record) !== 'undefined'){
                MyApp.util.Utilities.messageId = record.get('MSG_ID');
                grdMsg.getSelectionModel().select(record);
            }
        });
    },

    btnAddCommentClick: function(button, e, eOpts) {
        this.getBtnAddComment().setDisabled(true);

        if(MyApp.util.Utilities.message !== null){
            if(MyApp.util.Utilities.message.get('EMP_PROGRESS_TEXT') != '伝達中'){
                MessageCommon.showErrorMessage(MessageCommon.NotCommentOnCloseMessage);
                this.getBtnAddComment().setDisabled(false);
                return false;
            }
            var comment = this.getTxtComment();
            if(comment.getValue().trim().length === 0){
                MessageCommon.showErrorMessage(MessageCommon.CommentNull);
                this.getBtnAddComment().setDisabled(false);
                return false;
            }else{
                var param = {
                    msgID: MyApp.util.Utilities.message.get('MSG_ID'),
                    comment: this.getTxtComment().getValue()
                };
                var me = this;
                Ext.Ajax.request({
                    method: 'POST',
                    url: apiUrl + 'main/addComment',
                    params: {param: Ext.encode(param)},
                    success: function(response){
                        var obj = Ext.decode(response.responseText);
                        if(obj.responseCode === 403){
                            MessageCommon.showErrorMessage(obj.responseMessage);
                        }else{
                            if(obj.success === true){
                                me.getTxtComment().setValue('');
                                var grdMsgCommentStore = me.getGrdMsgComment().getStore();
                                grdMsgCommentStore.getProxy().setExtraParam("msgID", MyApp.util.Utilities.message.get('MSG_ID'));
                                MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                                grdMsgCommentStore.load();
                                me.getBtnAddComment().setDisabled(false);
                            }else{
                                MessageCommon.showInfoMessage(MessageCommon.UpdateFail);
                                me.getBtnAddComment().setDisabled(false);
                            }
                        }
                    },
                    failure: function(error){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        me.getBtnAddComment().setDisabled(false);
                    }
                });
            }
        }
        this.getBtnAddComment().setDisabled(false);
        return false;
    },

    frmMainAfterRender: function(component, eOpts) {
        this.getGrdMsg().on('itemcontextmenu', function(view, record, item, index,          e)
                            {
                                e.stopEvent();
                                console.log(record.get('MSG_ID'));
                                myMenu= Ext.getCmp('ctxMenu');
                                myMenu.setVisible(true);
                                var coords = e.getXY();
                                x=coords[0]-15;
                                y=coords[1]-25;
                                myMenu.showAt(x,y);
                                setDisableFavorite(record,myMenu);

                            });
        this.getBtnFavorite().renderData.tag = 0;
        this.getBtnConfirm().renderData.tag = 0;


        function setDisableFavorite(record,myMenu){
            var favoriteStatus = record.get('DISP_STATUS').substr(2, 1).toString();
            if(favoriteStatus === '1'){
                Ext.getCmp('menuItemAddFavorite').setDisabled(true);
                Ext.getCmp('menuItemDeleteFavorite').setDisabled(false);
            }else{
                Ext.getCmp('menuItemAddFavorite').setDisabled(false);
                Ext.getCmp('menuItemDeleteFavorite').setDisabled(true);
            }

            if(MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE || (favoriteStatus !== '0' && favoriteStatus !== '1')){
                Ext.getCmp('menuItemAddFavorite').setDisabled(true);
                Ext.getCmp('menuItemDeleteFavorite').setDisabled(true);
            }
            if(MyApp.util.Utilities.userEmpInfo.EMP_ID == record.get('ADD_EMP_ID')&& record.get('EMP_PROGRESS_TEXT')!='ゴミ'){
                Ext.getCmp('menuItemChangeStatus').setDisabled(false);
                if(record.get('EMP_PROGRESS_TEXT')=='伝達中'){

                    Ext.getCmp('menuItemStatusActive').setDisabled(true);
                     Ext.getCmp('menuItemStatusFinish').setDisabled(false);
                }else
                {
                    Ext.getCmp('menuItemStatusActive').setDisabled(false);
                    Ext.getCmp('menuItemStatusFinish').setDisabled(true);

                }
            }else
            {
                Ext.getCmp('menuItemChangeStatus').setDisabled(true);
                //myMenu.setHeight(60);
            }
        }

    },

    frmMainShow: function(component, eOpts) {
        if(MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE){
            this.getBtnWork().setDisabled(true);
            this.getBtnCircle().setDisabled(true);

        }else{
             this.getBtnWork().setDisabled(false);
             this.getBtnCircle().setDisabled(false);
        }
        Ext.getStore('StGroupMain').load();
        Ext.getStore('StTag').load();
    },

    btnFavoriteClick: function(button, e, eOpts) {
        var btnFavorite = this.getBtnFavorite();
        if(button.renderData.tag === 0){
            Ext.Ajax.request({
                method: 'POST',
                url: apiUrl + 'main/updateFavorite',
                params: {msgID: MyApp.util.Utilities.message.get('MSG_ID'), status: 1},
                success: function(data){
                    var obj = Ext.decode(data.responseText);
                    if(obj.responseCode === 403){
                        MessageCommon.showErrorMessage(obj.responseMessage);
                    }else{
                        if(obj.success === true){
                            var dispStatus = MyApp.util.Utilities.message.get('DISP_STATUS');
                            MyApp.util.Utilities.message.set('DISP_STATUS', dispStatus.substr(0, 2) + '1');
                            btnFavorite.setIcon('resources/images/s_release.ico');
                            btnFavorite.renderData.tag = 1;
                            MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                        }else{
                             MessageCommon.showErrorMessage(MessageCommon.UpdateFail);
                        }
                    }
                },
                failure: function(error){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });
        }else{
            Ext.Ajax.request({
                method: 'POST',
                url: apiUrl + 'main/updateFavorite',
                params: {msgID: MyApp.util.Utilities.message.get('MSG_ID'), status: 0},
                success: function(data){
                    var obj = Ext.decode(data.responseText);
                    if(obj.responseCode === 403){
                        MessageCommon.showErrorMessage(obj.responseMessage);
                    }else{
                        if(obj.success === true){
                            var dispStatus = MyApp.util.Utilities.message.get('DISP_STATUS');
                            MyApp.util.Utilities.message.set('DISP_STATUS', dispStatus.substr(0, 2) + '0');
                            btnFavorite.setIcon('resources/images/s_favorite.ico');
                            btnFavorite.renderData.tag = 0;
                            MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                        }else{
                             MessageCommon.showErrorMessage(MessageCommon.UpdateFail);
                        }
                    }
                },
                failure: function(error){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });
        }
    },

    btnConfirmClick: function(button, e, eOpts) {
        var btnConfirm = this.getBtnConfirm();
        var me = this;
        var msgFlag = 0;
        if(btnConfirm.renderData.tag == 1){
            msgFlag = 1;
        }
        var param = {
            msgID: MyApp.util.Utilities.message.get('MSG_ID'),
            msgFlag: msgFlag
        };
        Ext.Ajax.request({
            method: 'POST',
            url: apiUrl + 'main/updateMessageFlag',
            params:{param: Ext.encode(param)},
            success: function(response){
                var obj = Ext.decode(response.responseText);
                if(obj.responseCode === 403){
                    MessageCommon.showErrorMessage(obj.responseMessage);
                }else{
                    if(obj.success === true){
                        MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                        var grdMsgFlagStore = me.getGrdMsgFlag().getStore();
                        var dispStatus = MyApp.util.Utilities.message.get('DISP_STATUS');
                        MyApp.util.Utilities.message.set('DISP_STATUS', dispStatus.substr(0, 1) + msgFlag + dispStatus.substr(2, 1));
                        grdMsgFlagStore.each(function(record){
                            if(record.get('EMP_ID') == MyApp.util.Utilities.userEmpInfo.EMP_ID){
                                var empName = '';
                                if(msgFlag == 1){
                                    empName = record.get('EMP_NAME');
                                    record.set('EMP_NAME', empName.replace('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', '〆&nbsp;&nbsp;&nbsp;&nbsp;'));
                                    btnConfirm.setText('解除');
                                    btnConfirm.setIcon('resources/images/no_check.ico');
                                    btnConfirm.renderData.tag = 2;
                                }else{
                                    empName = record.get('EMP_NAME');
                                    record.set('EMP_NAME', empName.replace('〆&nbsp;&nbsp;&nbsp;&nbsp;', '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'));
                                    btnConfirm.setText('チェック');
                                    btnConfirm.setIcon('resources/images/check.ico');
                                    btnConfirm.renderData.tag = 1;
                                }
                                return;
                            }
                        });
                    }else{
                        MessageCommon.showInfoMessage(MessageCommon.UpdateFail);
                    }
                }
            },
            failure: function(error){
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    btnAttachClick: function(button, e, eOpts) {
        var path = MyApp.util.Utilities.message.get('RELEASE_DATE').replace('/', '').substr(0, 6) +
            '/' + MyApp.util.Utilities.message.get('MSG_ID') ;

        // +
        //     '/' + MyApp.util.Utilities.message.get('MSG_ID') + '.zip';
        Ext.Ajax.request({
            method: 'POST',
            url: apiUrl + 'main/dowloadAttach',
            params: {path: path,fileName:MyApp.util.Utilities.message.get('MSG_ID')},
            success: function(response){
                var obj = Ext.decode(response.responseText);
                if(obj.responseCode === 403){
                    MessageCommon.showErrorMessage(obj.responseMessage);
                }else{
                    if(obj.success === true){
                        if(obj.data.path !== ''){
                            var body = Ext.getBody();

                            var frame = body.createChild({
                                tag:'iframe',
                                cls:'x-hidden',
                                id:'hiddenform-iframe',
                                name:'iframe'
                            });

                            var form = body.createChild({
                                tag:'form',
                                cls:'x-hidden',
                                id:'hiddenform-form',
                                action: apiUrl + obj.data.path,
                                target:'iframe'
                            });

                            form.dom.submit();
                        }else{
                            MessageCommon.showErrorMessage(MessageCommon.AttachFolderNotExists);
                        }
                    }else{
                        MessageCommon.showErrorMessage(MessageCommon.DownloadFail);
                    }
                }
            },
            failure: function(error){
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    tpnCircleGroupItemClick: function(dataview, record, item, index, e, eOpts) {
        this.grdMsgLoadWithExtraParam();

        MyApp.util.Utilities.currentCircle=record.get('VALUE');
    },

    grdMsgSelectionChange: function(model, selected, eOpts) {
        this.resetDetailMessage();
        if(typeof(selected[0]) != 'undefined')
            this.loadDetailMessage(selected[0]);
    },

    grdMsgViewready: function(tablepanel, eOpts) {
        var grid = Ext.getCmp('grdMsg');
        var view = grid.getView();

        // record the current cellIndex
        grid.mon(view, {
            uievent: function (type, view, cell, recordIndex, cellIndex, e) {
                grid.cellIndex = cellIndex;
                grid.recordIndex = recordIndex;
            }
        });

        grid.tip = Ext.create('Ext.tip.ToolTip', {
            target: view.el,
            delegate: '.x-grid-cell',
            trackMouse: true,
            renderTo: Ext.getBody(),
            listeners: {
                beforeshow: function updateTipBody(tip) {
                     if (!Ext.isEmpty(grid.cellIndex) && grid.cellIndex !== -1) {
                         tip.update(grid.getStore().getAt(grid.recordIndex).get('MSG_TITLE'));
                    }
                }
            }
        });


    },

    cboThemeChange: function(field, newValue, oldValue, eOpts) {
        var now = new Date();
        var expiry = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);
        Ext.util.Cookies.set('theme', newValue, expiry, '/');
        MyApp.app.common.loadTheme(newValue);
    },

    cboSenderChange: function(field, newValue, oldValue, eOpts) {
        if(newValue!=='0')
        {
            this.grdMsgLoadWithExtraParam();
        }

    },

    txtMessageKeydown: function(textfield, e, eOpts) {
        var key = e.which || e.keyCode;
        if(key == 13) {
            this.grdMsgLoadWithExtraParam();
        }
    },

    txtTitleKeydown: function(textfield, e, eOpts) {
        var key = e.which || e.keyCode;
        if(key == 13) {
            this.grdMsgLoadWithExtraParam();
        }
    },

    txtCommentKeyDown: function(textfield, e, eOpts) {
        if(e.shiftKey){
            switch(e.button){
                case 12: if(Ext.getCmp('btnAddComment').disabled===true)return ;new MyApp.controller.CFrmMain().btnAddCommentClick();break;
            }
        }

    },

    txtTagSearchKeydown: function(textfield, e, eOpts) {
        var key = e.which || e.keyCode;
        if(key == 13) {
            this.grdMsgLoadWithExtraParam();
        }
    },

    MenuChangeStatusClick: function(menu, item, e, eOpts) {
        if(item===undefined)
        {
            return;
        }


        var mainView = Ext.ComponentQuery.query('mainview')[0];
        mainView.setLoading(true);
        if(item.getId()=='menuItemStatusActive'){
            Ext.getCmp('ctxMenu').setVisible(false);
            this.changeMsgStatus(1);
        }
        if(item.getId()=='menuItemStatusFinish'){
            Ext.getCmp('ctxMenu').setVisible(false);
            this.changeMsgStatus(2);
        }

    },

    btnMainSchedule1Click: function(button, e, eOpts) {
        MyApp.app.common.openNewWindow("scheduler", "Scheduler", 1276, 650);
    },

    tvwMemberCheckChange: function(node, checked, eOpts) {
        MyApp.app.common.checkChange(node, checked);
        new MyApp.controller.CucTreeMember().checkParentNode(node);
        this.grdMsgLoadWithExtraParam();
    },

    loadDetailMessage: function(record) {
        //Load and show message detail
        var me = this;
        var msgID = record.get('MSG_ID').trim();
        if(null !== msgID){
            MyApp.util.Utilities.messageId = msgID;
            MyApp.util.Utilities.message = record;
            //Favorite button
            var btnFavorite = this.getBtnFavorite();
            var btnConfirm = this.getBtnConfirm();
            btnFavorite.setDisabled(false);
            btnConfirm.setDisabled(false);
            me.getBtnAddComment().setDisabled(false);

            var favoriteStatus = record.get('DISP_STATUS').substr(2, 1).toString();
            if(favoriteStatus === '1'){
                btnFavorite.setIcon('resources/images/s_release.ico');
                btnFavorite.renderData.tag = 1;
            }else{
                btnFavorite.setIcon('resources/images/s_favorite.ico');
                btnFavorite.renderData.tag = 0;
            }

            if(MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE || (favoriteStatus !== '0' && favoriteStatus !== '1')){
                btnFavorite.setDisabled(true);
            }else{
                btnFavorite.setDisabled(false);
            }
            if(MyApp.util.Utilities.userEmpInfo.EMP_ID == record.get('ADD_EMP_ID') || MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE){
                this.getBtnEditMessage().setDisabled(false);
            }else{
                this.getBtnEditMessage().setDisabled(true);
            }

            //set btn AddComment Disabled base on Circle
            Ext.Ajax.request({
                method: 'POST',
                url: apiUrl + 'main/checkEditMessage',
                async: false,
                params: {msgID: record.get('MSG_ID')},
                success: function(data){
                    var obj = Ext.decode(data.responseText);
                    if(obj.responseCode === 403){
                        MessageCommon.showErrorMessage(obj.responseMessage);
                    }else{
                        if(obj.success === true){
                            if(obj.data.hasCircle===true){

                                if(obj.data.editable !== false){
                                    me.getBtnAddComment().setDisabled(false);
                                }else{
                                    me.getBtnAddComment().setDisabled(true);
                                }
                            }
                        }
                    }
                },
                failure: function(error){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });

            // message status is draft or complete all user can't comment --  admin can't comment
            if(MyApp.util.Utilities.message.data.EMP_PROGRESS_TEXT != '伝達中'||MyApp.util.Utilities.userEmpInfo.EMP_AUTH_ID == Constant.ADMIN_ROLE){
                me.getBtnAddComment().setDisabled(true);
            } else{
                // creater all way comment
                if(MyApp.util.Utilities.userEmpInfo.EMP_ID == record.get('ADD_EMP_ID')){
                    me.getBtnAddComment().setDisabled(false);
                }
            }
            this.getTxtMsg().setLoading(true, true);
            Ext.Ajax.request({
                method: 'POST',
                url: apiUrl + 'main/loadMessageDetail',
                params: {msgID: msgID},
                success: function(data){
                    me.getTxtMsg().setLoading(false);
                    var obj = Ext.decode(data.responseText);
                    if(obj.responseCode === 403){
                        MessageCommon.showErrorMessage(obj.responseMessage);
                    }else{
                        if(obj.success === true){
                            me.getTxtMsg().setValue(obj.data.MSG_TEXT);
                        }
                    }
                },
                failure: function(error){
                    me.getTxtMsg().setLoading(false);
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });

            this.getLblEmpName().setText(record.get('EMP_NAME'));
            this.getLblReleaseDate().setText(record.get('RELEASE_DATE'));
            this.getLblProgress().setText(record.get('EMP_PROGRESS_TEXT'));
            this.getLblImportant().setText(record.get('IMPORTANT_LEVEL'));
            this.getLblMsgTitle().setText(record.get('MSG_TITLE'));

            if(record.get('ATTACH') !== null)
                this.getBtnAttach().setVisible(true);

            //Load and show comments of message
            var grdMsgCommentStore = this.getGrdMsgComment().getStore();
            grdMsgCommentStore.getProxy().setExtraParam("msgID", msgID);
            grdMsgCommentStore.load();

            //Load and show Receiver
            var grdMsgFlagStore = this.getGrdMsgFlag().getStore();
            grdMsgFlagStore.getProxy().setExtraParam("msgID", msgID);
            btnConfirm.setDisabled(true);
            grdMsgFlagStore.load(function(records){
                if(records !== null){
                    for(var i = 0; i < records.length; i++){
                        if(records[i].get('EMP_ID') == MyApp.util.Utilities.userEmpInfo.EMP_ID){
                            btnConfirm.setDisabled(false);
                            records[i].set('EMP_NAME', '<font color="#db1819">'+records[i].get('EMP_NAME')+'</font>');
                            if(records[i].get('MSG_FLAG') == '0'){
                                btnConfirm.setText('チェック');
                                btnConfirm.setIcon('resources/images/check.ico');
                                btnConfirm.renderData.tag = 1;
                            }else{
                                btnConfirm.setText('解除');
                                btnConfirm.setIcon('resources/images/no_check.ico');
                                btnConfirm.renderData.tag = 2;
                            }
                            break;
                        }
                    }
                }
            });
        }
    },

    resetDetailMessage: function() {
        this.getLblEmpName().setText('');
        this.getLblReleaseDate().setText('');
        this.getLblProgress().setText('');
        this.getLblImportant().setText('');
        this.getLblMsgTitle().setText('');
        this.getTxtMsg().setValue('');
        this.getBtnAttach().setVisible(false);
        this.getBtnFavorite().setDisabled(true);
        this.getBtnEditMessage().setDisabled(true);
        this.getBtnAddComment().setDisabled(true);
        this.getBtnConfirm().setDisabled(true);
        this.getGrdMsgComment().getStore().loadData([],false);
        this.getGrdMsgFlag().getStore().loadData([],false);
         Ext.getCmp('txtComment').setValue('');
    },

    grdMsgLoadWithExtraParam: function() {
        if(MyApp.util.Utilities.isLoadingMsg===false){

            Ext.getCmp('tpnSenderGroup').setLoading(true);
            var circle = this.getTpnCircleGroup().getSelectionModel().getSelection()[0];//Get selected item on tpn circle group
            var circleID = null;
            if(typeof(circle) != 'undefined')
                circleID = circle.get('VALUE');

            var msgFilterName = this.getCboMessageStatus().getValue();//get selected value of cbo message status

            var grdMsgStore = this.getGrdMsg().getStore();
            if('' !== msgFilterName && null !== msgFilterName && -1 !== msgFilterName)
                grdMsgStore.getProxy().setExtraParam("msgFilterName", msgFilterName);
            else
                grdMsgStore.getProxy().setExtraParam("msgFilterName", 'RecvUnconfirmed');

            if('' !== circleID && null !== circleID && '-1' !== circleID){
                grdMsgStore.getProxy().setExtraParam("circleID", circleID);
            }else{
                grdMsgStore.getProxy().setExtraParam("circleID", '');
            }

            //$, $, $
            var arraySenderGroup = [];//arraySender

            Ext.getCmp('tpnSenderGroup').getView().node.cascadeBy(function(child){
                if (child.get('checked')===true )
                {
                    arraySenderGroup.push(child.get('id'));
                }
            });
            grdMsgStore.getProxy().setExtraParam("SenderGroup", JSON.stringify(arraySenderGroup));

            if(Ext.getCmp('cboSender').getValue()===null){
                grdMsgStore.getProxy().setExtraParam("sender", 0);
            }
            else{
                grdMsgStore.getProxy().setExtraParam("sender", Ext.getCmp('cboSender').getValue());
            }

            grdMsgStore.getProxy().setExtraParam("tag", Ext.getCmp('cboTagSearch').getValue().toString());

            grdMsgStore.getProxy().setExtraParam("title", Ext.getCmp('txtTitle').getValue());
            grdMsgStore.getProxy().setExtraParam("message", Ext.getCmp('txtMessage').getValue());

            grdMsgStore.getProxy().setExtraParam("searchFrom", 0);
            grdMsgStore.load({
                params: {start:0},
                callback : function(records, options, success) {
                    Ext.getCmp('tpnSenderGroup').setLoading(false);
                    if (success===false){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return;
                    }
                }
            });

            grdMsgStore.currentPage = 1;
        }

    },

    setcboMessageType: function(index) {
         var selectItem = Ext.getCmp('cboMessageType').getStore().getAt(index).get('VALUE');
        Ext.getCmp('cboMessageType').setValue(selectItem);
    },

    resetSearchValue: function() {
        // clear all search values to ready for result in search Form

        Ext.getCmp('txtTitle').setValue('');
        Ext.getCmp('txtMessage').setValue('');
        this.setcboMessageType(0);

        var selectItem = Ext.getCmp('cboSender').getStore().getAt(0).get('VALUE');
        Ext.getCmp('cboSender').setValue(selectItem);


        Ext.getCmp('tpnCircleGroup').getSelectionModel().deselectAll();

    },

    changeMsgStatus: function(newStatus) {
        var me=this ;
        var mainView = Ext.ComponentQuery.query('mainview')[0];
        Ext.Ajax.request({
            method: 'POST',
            url: apiUrl + 'Message/UpdateMsgProgress',
            params: {status:newStatus,msgID: MyApp.util.Utilities.message.get('MSG_ID')},
            success: function(data){
                var obj = Ext.decode(data.responseText);
                if(obj.responseCode === 403){
                    MessageCommon.showErrorMessage(obj.responseMessage);
                }else{
                    if(obj.success === true){
                        mainView.setLoading(false);
                        setDisplay(newStatus);
                        MessageCommon.showInfoMessage(MessageCommon.UpdateSuccessfully);
                    }else{
                        mainView.setLoading(false);
                        MessageCommon.showErrorMessage(MessageCommon.UpdateFail);
                    }
                }
            },
            failure: function(error){
                mainView.setLoading(false);
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });

        function setDisplay (newStatus){
            var sel_model = me.getGrdMsg().getSelectionModel();
            var record = sel_model.getSelection()[0];
            if(newStatus==1){
                record.set("EMP_PROGRESS_TEXT","伝達中");
                 me.getLblProgress().setText("伝達中");

            }
            else{
                record.set("EMP_PROGRESS_TEXT","完了");
                 me.getLblProgress().setText("完了");

            }
        }

    },

    init: function(application) {
        this.control({
            "#btnMainAddMsg": {
                click: this.btnMainAddMsgClick
            },
            "#btnTagSearch": {
                click: this.btnTagSearchClick
            },
            "#ctxMenu": {
                click: this.ctxMenuClick,
                mouseleave: this.ctxMenuMouseLeave
            },
            "#menuItemChangeStatus": {
                mouseleave: this.menuItemChangeStatusMouseLeave
            },
            "#btnMainSchedule": {
                click: this.btnMainScheduleClick
            },
            "#btnMainSearchMsg": {
                click: this.bttnMainSearchMsgClick
            },
            "#btnWork": {
                click: this.btnWorkClick
            },
            "#btnCircle": {
                click: this.btnCircleClick
            },
            "#btnQuickSearch": {
                click: this.btnQuickSearchClick
            },
            "#grdMsg": {
                itemdblclick: this.grdMsgItemDblClick,
                afterrender: this.grdMsgAfterRender,
                selectionchange: this.grdMsgSelectionChange,
                viewready: this.grdMsgViewready
            },
            "#btnEditMessage": {
                click: this.btnEditMessageClick
            },
            "#cboMessageType": {
                change: this.cboMessageTypeChange
            },
            "#cboMessageStatus": {
                change: this.cboMessageStatusChange
            },
            "#btnAddComment": {
                click: this.btnAddCommentClick
            },
            "#frmMain": {
                afterrender: this.frmMainAfterRender,
                show: this.frmMainShow
            },
            "#btnFavorite": {
                click: this.btnFavoriteClick
            },
            "#btnConfirm": {
                click: this.btnConfirmClick
            },
            "#btnAttach": {
                click: this.btnAttachClick
            },
            "#tpnCircleGroup": {
                itemclick: this.tpnCircleGroupItemClick
            },
            "#cboTheme": {
                change: this.cboThemeChange
            },
            "#cboSender": {
                change: this.cboSenderChange
            },
            "#txtMessage": {
                keydown: this.txtMessageKeydown
            },
            "#txtTitle": {
                keydown: this.txtTitleKeydown
            },
            "#txtComment": {
                keydown: this.txtCommentKeyDown
            },
            "#txtTagSearch": {
                keydown: this.txtTagSearchKeydown
            },
            "#menuChangeStatus": {
                click: this.MenuChangeStatusClick
            },
            "#btnMainSchedule1": {
                click: this.btnMainSchedule1Click
            },
            "#tvwSenderGroup": {
                checkchange: this.tvwMemberCheckChange
            }
        });
    }

});
