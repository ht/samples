/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});


Ext.application({

    requires: [
        'Ext.data.proxy.Rest',
        'Extensible.calendar.data.MemoryCalendarStore',
        'Extensible.calendar.data.EventStore',
        'Extensible.calendar.CalendarPanel'
    ],
    id: 'MyApp',
    models: [
        'MdMemberGroup',
        'MdCustomGroup',
        'MdGroupCombo',
        'MdListTask'
    ],
    stores: [
        'StMemberGroup',
        'StListTask',
        'StGroupMember',
        'StGroupMemberMaster'
    ],
    views: [
        'frmAddGroupMemberSchedule',
        'frmEditGroupMemberSchedule',
        'MainView'
    ],
    controllers: [
        'CFrmSchedule',
        'CGroupMemberController',
        'CScheduleMemberTree'
    ],
    name: 'MyApp',

    launch: function() {
        Ext.create('MyApp.view.MainView');
        Ext.define('MyApp.util.Utilities', {
            singleton: true,
            selectSectionPublic: null,
            segmentTime: 30,
            goTime: 0,
            activeViewValue: 3,
            dateSelected: MyApp.app.common.getScheduleToday(new Date()),
            listEmployee: [],
            listRoom: [],
            listNewStaff : [],
            listOldStaff : [],
            listNewRoom : [],
            listOldRoom : [],
            paraAddOrRemove: 0,
            userScheduleName: '',
            userScheduleID: 0,
            userEmpInfo: null,
            eventStore: null,
            token:null,
            sessionID: null
        });
        if(!Global.userLoged)
            return false;
        Ext.Ajax.defaultHeaders = {
            'token': Global.authData.token,
            'sessionID': Global.authData.sessionID
        };

        Ext.Ajax.on("beforerequest", function(conn, options){
            var xmlhttp = null;
            if (window.XMLHttpRequest){
                xmlhttp = new XMLHttpRequest();
            }
            else{
                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
            }
            if(xmlhttp !== null){
                xmlhttp.open("GET",phpClientUrl + "/site/checkLogin", false);
                xmlhttp.send();
                var data = Ext.decode(xmlhttp.responseText);
                if(!data.success){
                    window.location = window.location;
                }
            }
            else
            {
                alert("Your browser does not support XMLHTTP.");
            }
        });
        MyApp.util.Utilities.token = Global.authData.token;
        MyApp.util.Utilities.sessionID = Global.authData.sessionID;
        MyApp.util.Utilities.userEmpInfo = Global.authData.userEmpInfo;
        var storeIDs = [
            'StMemberGroup','StGroupMember','StListTask'
        ];
        for(var i = 0; i < storeIDs.length; i++){
            var store = Ext.getStore(storeIDs[i]);
            if(store){
                store.getProxy().url = apiUrl + store.getProxy().url;
            }
        }
        //console.log(Ext.getStore('StMemberGroup').getProxy().url);
        Ext.getStore('StMemberGroup').load({
            callback : function(records, options, success) {
                if (success) {
                    Ext.getCmp('tpnMemberForSchedules').expandAll();
                    var userloginArray = [Global.authData.userEmpInfo.EMP_ID];
                    //console.log(MyApp.controller.CScheduleMemberTree().setSelectMember);
                    new MyApp.controller.CScheduleMemberTree().setSelectMember(userloginArray);
                }
            }
        });
        Ext.getStore('StGroupMember').load();

        //Load grid
        MyApp.app.common.reload(MyApp.util.Utilities.segmentTime,MyApp.util.Utilities.activeViewValue);
    }

});
