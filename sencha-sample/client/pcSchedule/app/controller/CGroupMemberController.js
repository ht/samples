/*
 * File: app/controller/CGroupMemberController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CGroupMemberController', {
    extend: 'Ext.app.Controller',

    addNewGroupMember: function(button, e, eOpts) {
        var numberNode = [];

        Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(node){
            if(node.data.checked){
                if(node.get('id') % 1 === 0 && numberNode.indexOf(node.get('id') * 1) == -1){
                   numberNode.push(node.get('id')*1);
                }

            }
        });

        var txtGrpMemberSchedule = Ext.getCmp('txtGroupMemberLabel').getValue();

        if(txtGrpMemberSchedule !== '' && numberNode.length>0){

           Ext.Ajax.request({
               url: apiUrl+ 'master/InsertGroupMemberBySchedule',
               params: {
                   txtGroupName: txtGrpMemberSchedule,
                   arrayNode: JSON.stringify(numberNode)
               },
                success: function(response, options){
                    button.up('window').close();
                    Ext.getStore('StGroupMember').load({
                        scope: this,
                        callback: function(records, operation, success) {
                            if(success){
                                Ext.getCmp('cboGroupMemberBySchedule').setValue(Ext.getStore('StGroupMember').getAt(0).get('Value'));
                                Ext.getCmp('cboGroupMemberBySchedule').setValue('default');
                            }
                        }
                    });
                },
                failure: function(response, options){
                    Ext.MessageBox.show({
                        title: MessageCommon.ErrTitle,
                        msg: MessageCommon.InsertGroupMemberError,
                        buttons : Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    button.up('window').close();
                }

           });
            //Roi
           Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(node){
               node.set('checked',false);
           });
        }else{
            Ext.MessageBox.show({
                title: MessageCommon.ErrTitle,
                msg: MessageCommon.MissingSelectGroupError,
                buttons : Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    editGroupMemberSchedule: function(button, e, eOpts) {
        var numberNode = [];
        Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(node){
            if(node.data.checked){
               if(node.get('id') % 1 === 0)
                   numberNode.push(node.get('id')*1);
            }
        });
        console.log(numberNode);
        var selectGroup = Ext.getCmp('cboGroupMemberBySchedule').getValue();
        var txtGrpMemberName = Ext.getCmp('txtGroupMemberName').getValue();

        if(txtGrpMemberName !== '' && numberNode.length>0){

           Ext.Ajax.request({
               url: apiUrl+ 'master/EditGroupMemberBySchedule',
               params: {
                   txtGroupId: selectGroup,
                   txtGroupName: txtGrpMemberName,
                   arrayNode: JSON.stringify(numberNode)
               },
               success: function(response, options){//console.log(response.responseText);
                    button.up('window').close();
                    Ext.getCmp('cboGroupMemberBySchedule').getStore().load();
               },
               failure: function(response, options){
                    Ext.MessageBox.show({
                        title: MessageCommon.ErrTitle,
                        msg: MessageCommon.UpdateGroupMemberError,
                        buttons : Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    button.up('window').close();
                }

           });
        }else{
            Ext.MessageBox.show({
                title: MessageCommon.ErrTitle,
                msg: MessageCommon.MissingGroupMemberError,
                buttons : Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    deleteGroupMemberSchedule: function(button, e, eOpts) {
        var selectGroup = Ext.getCmp('cboGroupMemberBySchedule').getValue();
        if('default' != selectGroup){
           Ext.Ajax.request({
               url: apiUrl+ 'master/DeleteGroupMemberBySchedule',
               params: {
                   txtGroupId: selectGroup
               },
               success: function(response, options){//console.log(response.responseText);
                    button.up('window').close();
                    Ext.getCmp('cboGroupMemberBySchedule').getStore().load({
                        scope: this,
                        callback: function(records, operation, success) {
                            if(success){
                                Ext.getCmp('cboGroupMemberBySchedule').setValue('default');
                            }
                        }
                    });

               },
               failure: function(response, options){
                    Ext.MessageBox.show({
                        title: MessageCommon.ErrTitle,
                        msg: '削除できません。',
                        buttons : Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    button.up('window').close();
                }

           });
        }else{
            Ext.MessageBox.show({
                title: MessageCommon.ErrTitle,
                msg: '削除したいグループを選んでください。',
                buttons : Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    cancelGroupMember: function(button, e, eOpts) {
        button.up('window').close();
    },

    init: function(application) {
        this.control({
            "#btnAddNewGroup": {
                click: this.addNewGroupMember
            },
            "#btnEditGroupMember": {
                click: this.editGroupMemberSchedule
            },
            "#btnDeleteGroupMember": {
                click: this.deleteGroupMemberSchedule
            },
            "#btnGroupMemberCancel": {
                click: this.cancelGroupMember
            }
        });
    }

});
