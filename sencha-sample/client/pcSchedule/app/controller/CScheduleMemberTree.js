/*
 * File: app/controller/CScheduleMemberTree.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CScheduleMemberTree', {
    extend: 'Ext.app.Controller',

    id: 'CSheduleMemberTree',

    changeSelectGroup: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var arrayEmployee = [];
        //remove all check before
        me.removeSelectedMember();
        //get custom_members
        Ext.Ajax.request({
            url: apiUrl + 'master/LoadEmployeeByGroup',
            params:{
                customId: newValue
            },
            success:function(response){//console.log(response.responseText);
                var employeeArray = Ext.decode(response.responseText);//console.log(employeeArray);
                //console.log("list employee selected: " + employeeArray.CUSTOM_MEMBER);
                //remove all member has been select on tree.
                if(employeeArray.CUSTOM_MEMBER != null)
                    arrayEmployee = employeeArray.CUSTOM_MEMBER.split(",");


                var userLogin = Global.authData.userEmpInfo.EMP_ID;
                if (-1==arrayEmployee.indexOf(userLogin)){
                    arrayEmployee.push(userLogin);
                }
                console.log(arrayEmployee);
                me.setSelectMember(arrayEmployee);
                var arrpost = [];
                var arraylength = arrayEmployee.length;
                if(arraylength>0){
                    for(i = 0; i < arraylength; i++){
                        var pos = arrayEmployee.indexOf('');
                        if(pos>-1){
                            arrayEmployee.splice(pos,1);
                        }
                    }

                }

                MyApp.util.Utilities.listEmployee = arrayEmployee;

                //console.log(MyApp.util.Utilities.listEmployee);
                MyApp.app.common.reload(MyApp.util.Utilities.segmentTime,MyApp.util.Utilities.activeViewValue);
               arrayEmployee = [];
            },

            failure:function(fp, o){
            }

        });
    },

    checkGroupMemberChange: function(node, checked, eOpts) {
        if (node.get('id')=== MyApp.util.Utilities.userEmpInfo.EMP_ID){
            return;
        }
        MyApp.util.Utilities.goTime = 1;
        MyApp.util.Utilities.listNewStaff = [];
        MyApp.util.Utilities.listNewRoom = [];
        checkChange(node,checked);
        checkParentNode(node);

        //Ext.getCmp('pnlScheduleTop');
        var w = Ext.getCmp('pnlGridSchedule');
        var g = Ext.getCmp('pnlScheduleLeft');

        w.setLoading(true);
        g.setLoading(true);
        if(node.get('leaf')===true )
        {
            var itemIndex=MyApp.util.Utilities.listEmployee.indexOf(node.get('id')*1);
            var itemRoomIndex=MyApp.util.Utilities.listRoom.indexOf(node.get('id'));
            if(node.get('checked')===true){
                if(node.get('id') % 1 === 0 && itemIndex ==-1){
                    MyApp.util.Utilities.listEmployee.push(node.get('id')*1);
                }else if(-1 ==itemRoomIndex){
                   MyApp.util.Utilities.listRoom.push(node.get('id'));
                }
            }
            if(node.get('checked')===false){
                if(node.get('id') % 1 === 0){
                    MyApp.util.Utilities.listEmployee.splice(itemIndex,1);
                }else{
                    MyApp.util.Utilities.listRoom.splice(itemRoomIndex,1);
                }
            }
        }
        //process result
        /*listNewRoom = listEmployee: [](cũ roi)
            listRoom: [],
            listNewStaff : [],
            listOldStaff : [],
            listNewRoom : [],
            listOldRoom : [],
        */
        //staff

        var empLength = MyApp.util.Utilities.listEmployee.length;
        var oldStaffLength = MyApp.util.Utilities.listOldStaff.length;

        if (empLength < oldStaffLength){
            MyApp.util.Utilities.paraAddOrRemove = 1;//remove staff
            MyApp.util.Utilities.listNewRoom = [];
            for(var i = 0; i<oldStaffLength;i++){
                if (-1==MyApp.util.Utilities.listEmployee.indexOf(MyApp.util.Utilities.listOldStaff[i])){
                    MyApp.util.Utilities.listNewStaff.push(MyApp.util.Utilities.listOldStaff[i]);
                }
            }

        }else{
            for(var i = 0; i<empLength;i++){
                if (-1==MyApp.util.Utilities.listOldStaff.indexOf(MyApp.util.Utilities.listEmployee[i])&& MyApp.util.Utilities.userEmpInfo.EMP_ID !== MyApp.util.Utilities.listEmployee[i]){
                    MyApp.util.Utilities.listNewStaff.push(MyApp.util.Utilities.listEmployee[i]);
                }
            }
        }

        MyApp.util.Utilities.listOldStaff = MyApp.util.Utilities.listEmployee.slice(0);

        //room
        var roomLength = MyApp.util.Utilities.listRoom.length;
        var oldRoomLength = MyApp.util.Utilities.listOldRoom.length;
        if (0<roomLength){
           if (roomLength < oldRoomLength){
                MyApp.util.Utilities.paraAddOrRemove = 0;//remove Room
            }else{
                MyApp.util.Utilities.listNewStaff = [];
               for(var i = 0; i<roomLength;i++){
                  if (-1==MyApp.util.Utilities.listOldRoom.indexOf(MyApp.util.Utilities.listRoom[i])){
                       MyApp.util.Utilities.listNewRoom.push(MyApp.util.Utilities.listRoom[i]);
                  }
               }
            }
        }

        MyApp.util.Utilities.listOldRoom = MyApp.util.Utilities.listRoom.slice(0);


        //check all child node if parent node is checked
        function checkChange (node, checked){
            node.eachChild(function(n) {
                if(checked){
                    n.set('checked', true);
                    if(n.get('leaf')===true)
                    {
                        if(n.get('id') % 1 === 0 & MyApp.util.Utilities.listEmployee.indexOf(n.get('id')*1)==-1){
                            MyApp.util.Utilities.listEmployee.push(n.get('id')*1);
                        }else if (MyApp.util.Utilities.listRoom.indexOf(n.get('id'))==-1){
                            MyApp.util.Utilities.listRoom.push(n.get('id'));
                        }
                    }

                }else{
                    n.set('checked', false);
                    if(n.get('leaf')===true){
                        var itemIndex=MyApp.util.Utilities.listEmployee.indexOf(n.get('id')*1);
                        var itemRoomIndex=MyApp.util.Utilities.listRoom.indexOf(n.get('id'));
                        if (-1 <itemIndex)
                        {
                            MyApp.util.Utilities.listEmployee.splice(itemIndex,1);

                        }else if (-1 < itemRoomIndex){
                            MyApp.util.Utilities.listRoom.splice(itemRoomIndex,1);
                        }
                    }
                }
                if(n.hasChildNodes()){
                    checkChange(n, checked);
                }
            });
        }


        //check parent node if all child node is checked
        function checkParentNode(node)
        {
            if(node.getDepth()>1)
            {
                p = node.parentNode;
                var pChildCheckedCount = 0;
                p.suspendEvents();
                p.eachChild(function(c) {
                    if (c.get('checked')) pChildCheckedCount++;
                });
                if(pChildCheckedCount==p.childNodes.length){
                    p.set('checked', true);
                }
                else{
                    p.set('checked', false);
                }
                checkParentNode(p);
                p.resumeEvents();
            }
        }


        //MyApp.app.common.reload(MyApp.util.Utilities.segmentTime, MyApp.util.Utilities.activeViewValue);
        MyApp.app.common.reload(4, MyApp.util.Utilities.activeViewValue);
    },

    setSelectMember: function(arrayEmployee) {
        var me = this;
        //console.log("danh sách các member đã chọn "+arrayEmployee);
        //set selected member for treeview member

        Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(child){//console.log(child.get('id')*1);
            if(arrayEmployee.indexOf(child.get('id')) != -1){//console.log(Global.authData.userEmpInfo.EMP_ID * 1);

                child.set("checked",true);
                //check parent node if all child node is check
                p = child.parentNode;
                p.suspendEvents();
                var pChildCheckedCount = 0;
                p.eachChild(function(c) {
                if (c.get('checked'))
                   pChildCheckedCount++;
                });

                if(pChildCheckedCount==p.childNodes.length){
                    p.set('checked', true);
                }
                p.resumeEvents();
                me.expandParentsNode(child);
            }
        });
    },

    expandParentsNode: function(node) {
            // if a not is checked expand it's parentNode
            if(node.parentNode!==null){
                node.expand(false);
                this.expandParentsNode(node.parentNode);
            }
    },

    removeSelectedMember: function() {
        Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(child){
            child.set("checked",false);
            MyApp.util.Utilities.listEmployee = [];
        });
    },

    init: function(application) {
        this.control({
            "#cboGroupMemberBySchedule": {
                change: this.changeSelectGroup
            },
            "#tpnMemberForSchedules": {
                checkchange: this.checkGroupMemberChange
            }
        });
    }

});
