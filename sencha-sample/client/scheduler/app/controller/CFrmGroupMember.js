/*
 * File: app/controller/CFrmGroupMember.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CFrmGroupMember', {
    extend: 'Ext.app.Controller',

    btnGroupMemberSaveClick: function(button, e, eOpts) {
        var txtGroupMember = Ext.getCmp('txtGroupMember').getValue();
        if(txtGroupMember !== ''){
            if(Ext.getCmp('frmGroupMember').renderData.addNew){
                Ext.Ajax.request({
                    url: apiUrl+ 'master/InsertGroupMemberBySchedule',
                    params: {
                        txtGroupName: txtGroupMember, arrayNode: Ext.encode(MyApp.util.Utilities.scheduleMembers)
                    },
                    success: function(response, options){
                        Ext.getStore('StGroupMember').load({
                            callback: function(records, operation, success) {
                                if(success){
                                    Ext.getCmp('cboGroupMemberScheduler').setValue('default');
                                }
                            }
                        });
                        Ext.getCmp('cboGroupMemberScheduler').setDisabled(true);
                        Ext.getStore('StMembersGroups').load(function(){
                            Ext.getCmp('cboGroupMemberScheduler').setDisabled(false);
                        });
                        button.up('window').close();
                    },
                    failure: function(response, options){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    }
                });
            }else{
                var groupMember = Ext.getCmp('cboGroupMemberScheduler').getValue();
                Ext.Ajax.request({
                    url: apiUrl+ 'master/EditGroupMemberBySchedule',
                    params: {
                        txtGroupId: groupMember,
                        txtGroupName: txtGroupMember,
                        arrayNode: Ext.encode(MyApp.util.Utilities.scheduleMembers)
                    },
                    success: function(response, options){
                        Ext.getStore('StGroupMember').load();
                        Ext.getCmp('cboGroupMemberScheduler').setDisabled(true);
                        Ext.getStore('StMembersGroups').load(function(){
                            Ext.getCmp('cboGroupMemberScheduler').setDisabled(false);
                        });
                        button.up('window').close();
                    },
                    failure: function(response, options){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    }

                });
            }
        }else{
            MessageCommon.showErrorMessage(MessageCommon.MissingGroupMemberError);
        }
    },

    btnGroupMemberCancelClick: function(button, e, eOpts) {
        button.up('window').close();
    },

    btnGroupMemberDeleteClick: function(button, e, eOpts) {
        var cboGroupMember = Ext.getCmp('cboGroupMemberScheduler');
        Ext.Ajax.request({
            url: apiUrl+ 'master/DeleteGroupMemberBySchedule',
            params: {
                txtGroupId: cboGroupMember.getValue()
            },
            success: function(response, options){
                button.up('window').close();
                Ext.getCmp('cboGroupMemberScheduler').getStore().load({
                    callback: function(records, operation, success) {
                        if(success){
                            cboGroupMember.setValue('default');
                            var schedule = new MyApp.controller.CSchedule();
                            MyApp.util.Utilities.scheduleMembers = [];
                            schedule.loadScheduleMember();
                            schedule.setScheduleMember();
                        }
                    }
                });

            },
            failure: function(response, options){
                button.up('window').close();
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    init: function(application) {
        this.control({
            "#btnGroupMemberSave": {
                click: this.btnGroupMemberSaveClick
            },
            "#btnGroupMemberCancel": {
                click: this.btnGroupMemberCancelClick
            },
            "#btnGroupMemberDelete": {
                click: this.btnGroupMemberDeleteClick
            }
        });
    }

});
