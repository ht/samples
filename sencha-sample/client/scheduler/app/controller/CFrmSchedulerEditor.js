/*
 * File: app/controller/CFrmSchedulerEditor.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CFrmSchedulerEditor', {
    extend: 'Ext.app.Controller',

    frmSchedulerEditorBeforeShow: function(component, eOpts) {
        var me = this;
        Ext.getCmp('chkProjectJob').renderData.first = true;
        if(component.renderData.record !== null){
            me.loadScheduleStaffTree(MyApp.util.Utilities.scheduleMembersEditorID);
        }else{
            MyApp.util.Utilities.scheduleMembersEditorID = [
                MyApp.util.Utilities.userEmpInfo.EMP_ID * 1
            ];
            MyApp.util.Utilities.scheduleMembersEditorName = [
                MyApp.util.Utilities.userEmpInfo.EMP_NAME
            ];

            me.loadScheduleStaffTree(MyApp.util.Utilities.scheduleMembersEditorID);
            Ext.getCmp('txtScheduleStaff').setValue( MyApp.util.Utilities.scheduleMembersEditorName.join(', '));

            Ext.getCmp('cboPlanType').setValue(Ext.getStore('StPlanType').getAt(0).get('VALUE'));
            Ext.getCmp('cboRoom').setValue('null');
            Ext.getCmp('cboStaffStatus').setValue(Ext.getStore('StStaffStatus').getAt(0).get('VALUE'));
            Ext.getCmp('cboSection').setValue(Ext.getStore('StSection').getAt(0).get('VALUE'));

            Ext.getCmp('chkProjectJob').setValue(true);
            Ext.getCmp('dtpStartDate').setValue(new Date());
            Ext.getCmp('dtpEndDate').setValue(new Date());
            Ext.getCmp('chkScheduleEdited').setValue(true);
            Ext.getCmp('rdSchedulePublic').setValue(true);
            Ext.getCmp('btnScheduleDelete').setVisible(false);
        }

    },

    frmSchedulerEditorShow: function(component, eOpts) {
        Ext.getCmp('txtScheduleTitle').focus();
    },

    frmSchedulerEditorClose: function(panel, eOpts) {
        Ext.getCmp('tpnStaff').collapseAll();
    },

    btnScheduleCancelClick: function(button, e, eOpts) {
        button.up('window').close();
    },

    btnScheduleSaveClick: function(button, e, eOpts) {
        var infoSchedule = {
            Title: Ext.getCmp('txtScheduleTitle').getValue(),
            Notes: Ext.getCmp('txtScheduleNote').getValue(),
            ProjectName: Ext.getCmp('txtScheduleProjectJobHidden').getValue(),
            ScheduleType: Ext.getCmp('cboPlanType').getValue()
        };
        var room = Ext.getCmp('cboRoom').getValue().trim();
        infoSchedule.EditEnable = (Ext.getCmp('chkScheduleEdited').getValue()) ? 0 : 1;
        infoSchedule.PrivacySchedule = (Ext.getCmp('rdSchedulePublic').getValue()) ? 1 : 0;
        if(room == 'null'){
            infoSchedule.Room = '';
        }else{
            infoSchedule.Room = room;
        }

        var allDay = Ext.getCmp('chkAllDay').getValue();
        var startDate = MyApp.app.common.getScheduleToday(Ext.getCmp('dtpStartDate').getValue());
        var endDate = MyApp.app.common.getScheduleToday(Ext.getCmp('dtpEndDate').getValue());
        var startTime = '00:00:00';
        var endTime = '00:00:00';
        if(!allDay){
            var startTime = MyApp.app.common.getTime(Ext.getCmp('dtpStartTime').getValue());
            var endTime = MyApp.app.common.getTime(Ext.getCmp('dtpEndTime').getValue());
        }

        if(infoSchedule.Title.trim() === ''){
            MessageCommon.showErrorMessage(MessageCommon.MissingScheduleTitle);
            return;
        }
        if(allDay && infoSchedule.Room !== ''){
            MessageCommon.showErrorMessage(MessageCommon.HaveRoomOnAllDay);
            return;
        }

        infoSchedule.StartDate = startDate + ' ' + startTime;
        infoSchedule.EndDate = endDate + ' ' + endTime;
        infoSchedule.MemberSchedule = MyApp.util.Utilities.scheduleMembersEditorID.join(',');



        var url = '';
        if(Ext.getCmp('frmSchedulerEditor').renderData.record !== null){
            infoSchedule.EventId = Ext.getCmp('frmSchedulerEditor').renderData.record.get('Id');
            url = apiUrl + 'schedule/EditScheduler';
        }else{
            url = apiUrl + 'schedule/AddScheduler';
        }
        var frmSchedulerEditor = Ext.getCmp('frmSchedulerEditor');
        frmSchedulerEditor.setLoading(true);
        Ext.Ajax.request({
            type: 'rest',
            url: url,
            timeout: 80000,
            params: {
                arrayScheduleInfo: Ext.encode(infoSchedule)
            },
            success: function (response) {
                data = Ext.decode(response.responseText);
                frmSchedulerEditor.setLoading(false);
                if (data.success) {
                    var cSchedule = new MyApp.controller.CSchedule();
                    MyApp.util.Utilities.scheduleMembersLoaded = [];
                    Ext.getCmp('pnlSchedule').eventStore.loadData([], false);
                    cSchedule.setScheduleMember();
                    frmSchedulerEditor.close();
                } else{
                    if(data.checkRoom !== ''){
                        MessageCommon.showInfoMessage(data.checkRoom);
                    }else{
                        MessageCommon.showInfoMessage(MessageCommon.OperationFail);
                    }
                }
            },
            failure: function (fp, o) {
                frmSchedulerEditor.setLoading(false);
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    btnScheduleDeleteClick: function(button, e, eOpts) {
        var frmSchedulerEditor = Ext.getCmp('frmSchedulerEditor');

        var scheduleInfo = {
            'EventId': frmSchedulerEditor.renderData.record.get('Id')
        };
        Ext.Msg.confirm(MessageCommon.ConfirmTitle, MessageCommon.DeleteConfirm, function (btn, text) {
            if (btn === 'yes') {
                frmSchedulerEditor.setLoading(true);
                Ext.Ajax.request({
                    type: 'rest',
                    async: false,
                    url: apiUrl + 'schedule/DeleteSchedule',
                    params: {
                        arrayScheduleInfo: Ext.encode(scheduleInfo)
                    },
                    success: function (response) {
                        var cSchedule = new MyApp.controller.CSchedule();
                        MyApp.util.Utilities.scheduleMembersLoaded = [];
                        Ext.getCmp('pnlSchedule').eventStore.loadData([], false);
                        cSchedule.setScheduleMember();
                        frmSchedulerEditor.setLoading(false);
                        frmSchedulerEditor.close();
                    },

                    failure: function (fp, o) {
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    }
                });
            }
        }, this);
    },

    chkAllDayChange: function(field, newValue, oldValue, eOpts) {
        if(newValue){
            Ext.getCmp('dtpStartTime').setVisible(false);
            Ext.getCmp('dtpEndTime').setVisible(false);
        }else{
            Ext.getCmp('dtpStartTime').setVisible(true);
            Ext.getCmp('dtpEndTime').setVisible(true);
        }
    },

    tpnStaffCheckChange: function(node, checked, eOpts) {
        var me = this;
        MyApp.app.common.checkChange(node, checked);
        node.cascadeBy(function(child){
            if(child.get('id') == MyApp.util.Utilities.userEmpInfo.EMP_ID){
                child.set('checked', true);
            }
            var index = MyApp.util.Utilities.scheduleMembersEditorID.indexOf(child.get('id') * 1);
            if(child.get('leaf') && child.get('checked') && index == -1){
                MyApp.util.Utilities.scheduleMembersEditorID.push(child.get('id') * 1);
                MyApp.util.Utilities.scheduleMembersEditorName.push(child.get('text'));
            }else if(child.get('leaf') && child.get('checked') === false){
                MyApp.util.Utilities.scheduleMembersEditorID.splice(index, 1);
                MyApp.util.Utilities.scheduleMembersEditorName.splice(index, 1);
            }
        });
        Ext.getCmp('txtScheduleStaff').setValue(MyApp.util.Utilities.scheduleMembersEditorName.join(', '));
        MyApp.app.common.checkParentNode(node);
    },

    tpnProjectJobCheckChange: function(dataview, record, item, index, e, eOpts) {
        if(record.get('leaf')){
            if(record.parentNode){
                Ext.getCmp('txtScheduleProjectJob').setValue(record.parentNode.get('text') + ' / ' + record.get('text'));
                Ext.getCmp('txtScheduleProjectJobHidden').setValue(record.get('id'));
            }
        }
    },

    cboSectionSelect: function(combo, records, eOpts) {
        this.loadScheduleProjectJobTree();
    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        if(Ext.getCmp('chkProjectJob').renderData.first){
            Ext.getCmp('chkProjectJob').renderData.first = false;
        }else{
            this.loadScheduleProjectJobTree();
        }
    },

    dtpStartDateSelect: function(field, value, eOpts) {

        if(Ext.getCmp('dtpStartDate').getValue() > Ext.getCmp('dtpEndDate').getValue()){
            Ext.getCmp('dtpEndDate').setValue(Ext.getCmp('dtpStartDate').getValue());
        }

        this.dtpStartTimeSelect();
    },

    dtpEndDateSelect: function(field, value, eOpts) {
        if(Ext.getCmp('dtpEndDate').getValue() < Ext.getCmp('dtpStartDate').getValue()){
            Ext.getCmp('dtpStartDate').setValue(Ext.getCmp('dtpEndDate').getValue());
        }

        this.dtpStartTimeSelect();
    },

    dtpStartTimeSelect: function(combo, records, eOpts) {
        if(Ext.getCmp('dtpStartDate').getValue() < Ext.getCmp('dtpEndDate').getValue()){
            return;
        }
        var dtpStartTime = Ext.getCmp('dtpStartTime');
        var dtpEndTime = Ext.getCmp('dtpEndTime');

        if(dtpStartTime.getValue() >= dtpEndTime.getValue()){
            dtpEndTime.setValue(Ext.Date.add(new Date(
                dtpStartTime.getValue()
            ),Ext.Date.HOUR, 1));
        }
        if(dtpEndTime.getValue().getHours() > 22 || (dtpEndTime.getValue().getHours() == 22 && dtpEndTime.getValue().getMinutes() > 0)){
            dtpStartTime.setValue('21:00');
            dtpEndTime.setValue('22:00');
        }
    },

    dtpEndTimeSelect: function(combo, records, eOpts) {
        if(Ext.getCmp('dtpStartDate').getValue() < Ext.getCmp('dtpEndDate').getValue()){
            return;
        }
        if(Ext.getCmp('dtpEndTime').getValue() <= Ext.getCmp('dtpStartTime').getValue()){
            Ext.getCmp('dtpStartTime').setValue(Ext.Date.add(new Date(
                Ext.getCmp('dtpEndTime').getValue()
            ),Ext.Date.HOUR, -1));
        }
        if(Ext.getCmp('dtpStartTime').getValue().getHours() < 8){
            Ext.getCmp('dtpStartTime').setValue('8:00');
            Ext.getCmp('dtpEndTime').setValue('9:00');
        }
    },

    loadScheduleStaffTree: function(scheduleStaff) {
        var cloneArrayEmp = scheduleStaff.slice(0), me = this;
        Ext.getCmp('tpnStaff').getView().node.cascadeBy(function(child){
            child.set('checked', false);
            var index = cloneArrayEmp.indexOf(child.get('id') * 1);
            if(index != -1){
                child.set('checked', true);
                cloneArrayEmp.splice(index, 1);
                me.expandParentsNode(child);
            }
            MyApp.app.common.checkParentNode(child);
        });

    },

    loadScheduleProjectJobTree: function() {
        var chkProjectJob = Ext.getCmp('chkProjectJob');
        chkProjectJob.setDisabled(true);
        Ext.getCmp('tpnProjectJob').setLoading(true);
        Ext.getCmp('cboSection').setDisabled(true);
        Ext.getCmp('txtScheduleProjectJob').setValue('');
        var checkOnlyActive = 0;
        if (chkProjectJob.getValue())
            checkOnlyActive = 1;
        Ext.getStore('StProjectJob').load({
            params: {
                sectionId: Ext.getCmp('cboSection').getValue(),
                chkOnlyActive: checkOnlyActive
            },
            callback: function(record, store, success){
                if(success){
                    chkProjectJob.setDisabled(false);
                    Ext.getCmp('cboSection').setDisabled(false);
                    Ext.getCmp('tpnProjectJob').setLoading(false);
                }
            }
        });
    },

    expandParentsNode: function(node) {
        if(node.parentNode !== null) {
            node.expand(false);
            this.expandParentsNode(node.parentNode);
        }
    },

    setScheduleTime: function() {



    },

    init: function(application) {
        this.control({
            "#frmSchedulerEditor": {
                beforeshow: this.frmSchedulerEditorBeforeShow,
                show: this.frmSchedulerEditorShow,
                close: this.frmSchedulerEditorClose
            },
            "#btnScheduleCancel": {
                click: this.btnScheduleCancelClick
            },
            "#btnScheduleSave": {
                click: this.btnScheduleSaveClick
            },
            "#btnScheduleDelete": {
                click: this.btnScheduleDeleteClick
            },
            "#chkAllDay": {
                change: this.chkAllDayChange
            },
            "#tpnStaff": {
                checkchange: this.tpnStaffCheckChange
            },
            "#tpnProjectJob": {
                itemclick: this.tpnProjectJobCheckChange
            },
            "#cboSection": {
                select: this.cboSectionSelect
            },
            "#chkProjectJob": {
                change: this.onCheckboxfieldChange
            },
            "#dtpStartDate": {
                select: this.dtpStartDateSelect
            },
            "#dtpEndDate": {
                select: this.dtpEndDateSelect
            },
            "#dtpStartTime": {
                select: this.dtpStartTimeSelect
            },
            "#dtpEndTime": {
                select: this.dtpEndTimeSelect
            }
        });
    }

});
