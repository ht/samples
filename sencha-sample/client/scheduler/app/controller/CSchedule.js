/*
 * File: app/controller/CSchedule.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CSchedule', {
    extend: 'Ext.app.Controller',

    btnDayClick: function(button, e, eOpts) {
        this.reloadScheduler('hourAndDay');
    },

    btnWeekClick: function(button, e, eOpts) {
        this.reloadScheduler('weekAndDay');
    },

    btnMonthClick: function(button, e, eOpts) {
        this.reloadScheduler('monthAndDay');
    },

    onEventDblClick: function(dataview, record, e) {
        var frmSchedulerEditor = Ext.create('MyApp.view.frmSchedulerEditor');
        frmSchedulerEditor.renderData.record = record;
        Ext.Ajax.request({
            type: 'post',
            async: false,
            params: {
                scheduleId: record.get('Id')
            },
            url: apiUrl + 'schedule/LoadScheduleByID',
            success: function (response) {
                data = Ext.decode(response.responseText);
                if(data.success){
                    if(data.schedule.LOCK_FLAG == '1' && data.schedule.OPENED_FLAG == '0' && data.schedule.STAFF_ID != Global.authData.userEmpInfo.EMP_ID){
                        return;
                    }

                    frmSchedulerEditor.show();
                    var scheduleStaffID = [], scheduleStaffName = '', t = data.scheduleStaff.length;
                    MyApp.util.Utilities.scheduleMembersEditorID = [];
                    MyApp.util.Utilities.scheduleMembersEditorName = [];
                    for(var i = 0; i < t; i++){
                        MyApp.util.Utilities.scheduleMembersEditorID.push(data.scheduleStaff[i].USERID * 1);
                        MyApp.util.Utilities.scheduleMembersEditorName.push(data.scheduleStaff[i].USERNAME);
                    }

                    Ext.getCmp('txtScheduleStaff').setValue(MyApp.util.Utilities.scheduleMembersEditorName.join(', '));
                    Ext.getCmp('txtScheduleTitle').setValue(data.schedule.TITLE);
                    Ext.getCmp('txtScheduleNote').setValue(data.schedule.REMARKS);
                    Ext.getCmp('cboPlanType').setValue(data.schedule.SCHEDULE_TYPE_ID);

                    if(data.schedule.ROOM_ID !== null){
                        Ext.getCmp('cboRoom').setValue(data.schedule.ROOM_ID);
                    }else{
                        Ext.getCmp('cboRoom').setValue('null');
                    }
                    Ext.getCmp('cboStaffStatus').setValue(Ext.getStore('StStaffStatus').getAt(0).get('VALUE'));

                    if(data.schedule.LOCK_FLAG == '1'){
                        Ext.getCmp('chkScheduleEdited').setValue(false);
                    }else{
                        Ext.getCmp('chkScheduleEdited').setValue(true);
                    }
                    /**
                            data.schedule.LOCK_FLAG
                            0: unlock
                            1: lock
                        */
                    if((data.schedule.STAFF_ID != Global.authData.userEmpInfo.EMP_ID && data.schedule.LOCK_FLAG == '1') || MyApp.util.Utilities.scheduleMembersEditorID.indexOf(Global.authData.userEmpInfo.EMP_ID * 1) == -1){
                        Ext.getCmp('btnScheduleSave').setDisabled(true);
                        Ext.getCmp('btnScheduleDelete').setDisabled(true);
                    }else{
                        Ext.getCmp('btnScheduleSave').setDisabled(false);
                        Ext.getCmp('btnScheduleDelete').setDisabled(false);
                    }
                    if(data.schedule.OPENED_FLAG == '1') {
                        Ext.getCmp('rdSchedulePublic').setValue(true);
                        Ext.getCmp('rdSchedulePrivate').setValue(false);
                    } else {
                        Ext.getCmp('rdSchedulePublic').setValue(false);
                        Ext.getCmp('rdSchedulePrivate').setValue(true);
                    }
                    if(data.schedule.JOB_ID !== null){
                        Ext.getCmp('txtScheduleProjectJob').setValue(data.schedule.PROJECT_NAME + '/' + data.schedule.JOB_NAME);
                        Ext.getCmp('txtScheduleProjectJobHidden').setValue(data.schedule.JOB_ID);
                    }


                    if(record.raw.AllDay){
                        Ext.getCmp('chkAllDay').setValue(true);
                        Ext.getCmp('dtpEndDate').setValue(Ext.Date.add(new Date(record.get('EndDate')),Ext.Date.DAY, -1));
                        Ext.getCmp('dtpStartTime').setVisible(false);
                        Ext.getCmp('dtpEndTime').setVisible(false);
                    }else{
                        Ext.getCmp('dtpEndDate').setValue(record.get('EndDate'));
                        Ext.getCmp('dtpStartTime').setValue(record.get('StartDate'));
                        Ext.getCmp('dtpEndTime').setValue(record.get('EndDate'));
                    }
                    Ext.getCmp('dtpStartDate').setValue(record.get('StartDate'));
                    Ext.getCmp('chkProjectJob').setValue(true);
                    Ext.getCmp('cboSection').setValue(Ext.getStore('StSection').getAt(0).get('VALUE'));
                    Ext.getCmp('btnScheduleDelete').setVisible(true);

                }else{
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            },
            failure: function (fp, o) {
                component.setLoading(false);
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    dtpDateSelect: function(datepicker, date, eOpts) {
        this.resetEventStore(datepicker.renderData.oldValue.getMonth(), date.getMonth());
        datepicker.renderData.oldValue = date;

    },

    btnNextClick: function(button, e, eOpts) {
        var picker = Ext.getCmp('dtpDate');
        var month = picker.getValue().getMonth();
        switch(Ext.getCmp('pnlSchedule').viewPreset){
            case 'hourAndDay':
                picker.setValue(Ext.Date.add(picker.getValue(), Ext.Date.DAY, 1));
                break;
            case 'weekAndDay':
                picker.setValue(Ext.Date.add(picker.getValue(), Ext.Date.DAY, 7));
                break;
            default:
                picker.setValue(Ext.Date.add(picker.getValue(), Ext.Date.MONTH, 1));
                break;
        }
        this.resetEventStore(month, picker.getValue().getMonth());

    },

    btnPrevClick: function(button, e, eOpts) {
        var picker = Ext.getCmp('dtpDate');
        var month = picker.getValue().getMonth();
        switch(Ext.getCmp('pnlSchedule').viewPreset){
            case 'hourAndDay':
                picker.setValue(Ext.Date.add(picker.getValue(), Ext.Date.DAY, -1));
                break;
            case 'weekAndDay':
                picker.setValue(Ext.Date.add(picker.getValue(), Ext.Date.DAY, -7));
                break;
            default:
                picker.setValue(Ext.Date.add(picker.getValue(), Ext.Date.MONTH, -1));
                break;
        }

        this.resetEventStore(month, picker.getValue().getMonth());
    },

    pnlSchedulesAfterRender: function(component, eOpts) {
        Ext.getCmp('dtpDate').setValue(new Date());
    },

    tpnMemberForSchedulesCheckChange: function(node, checked, eOpts) {
        var me = this;
        //No change when check current user login
        if(node.get('id') == MyApp.util.Utilities.userEmpInfo.EMP_ID){
            node.set('checked', true);
            me.setScheduleMember();
        }else{
            //Check child node
            if(node.get('expanded')){
                Ext.getCmp('tpnMemberForSchedules').setLoading(true);
                node.collapse(false, function(){
                    MyApp.app.common.checkChange(node, checked);
                    node.expand(false, function(){
                        me.setScheduleMember();
                        setTimeout(function(){
                            Ext.getCmp('tpnMemberForSchedules').setLoading(false);
                        }, 200);
                    });
                });
            }else{
                MyApp.app.common.checkChange(node, checked);
                me.setScheduleMember();
            }
        }

        //Check parent node
        MyApp.app.common.checkParentNode(node);

    },

    cboGroupMemberSchedulerSelect: function(combo, records, eOpts) {
        this.filterScheduleMember(records[0]);
        this.loadScheduleMember();
        this.setScheduleMember();
    },

    dtpDateAfterRender: function(component, eOpts) {
        component.renderData.oldValue = new Date();
    },

    btnGroupMemberEditClick: function(button, e, eOpts) {
        var groupMember = Ext.getCmp('cboGroupMemberScheduler').getValue();
        if('default' == groupMember){
            Ext.Msg.show({
                title: MessageCommon.TitleWarning,
                msg : MessageCommon.CheckGroupEditWarning,
                buttons : Ext.MessageBox.OK,
                icon: Ext.MessageBox.WARNING
            });
            return;
        }
        if(MyApp.util.Utilities.scheduleMembers.length <= 1){
            Ext.Msg.show({
                title: MessageCommon.TitleWarning,
                msg: MessageCommon.CheckNumberWarning,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.WARNING
            });
            return;
        }

        var frmGroupMember = Ext.create('MyApp.view.frmGroupMember');
        frmGroupMember.renderData.addNew = false;
        Ext.getCmp('txtGroupMember').setValue(Ext.getCmp('cboGroupMemberScheduler').getRawValue());
        Ext.getCmp('btnGroupMemberDelete').setVisible(true);
        Ext.getCmp('btnGroupMemberCancel').setVisible(false);
        frmGroupMember.show();
    },

    btnGroupMemberAddClick: function(button, e, eOpts) {
        var groupMember = Ext.getCmp('cboGroupMemberScheduler').getValue();
        if('default' != groupMember){
            Ext.Msg.show({
                title: MessageCommon.TitleWarning,
                msg : MessageCommon.CheckGroupAddWarning,
                buttons : Ext.MessageBox.OK,
                icon: Ext.MessageBox.WARNING
            });
            return;
        }
        if(MyApp.util.Utilities.scheduleMembers.length <= 1){
            Ext.Msg.show({
                title: MessageCommon.TitleWarning,
                msg: MessageCommon.CheckNumberWarning,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.WARNING
            });
            return;
        }

        var frmGroupMember = Ext.create('MyApp.view.frmGroupMember');
        frmGroupMember.renderData.addNew = true;
        Ext.getCmp('btnGroupMemberDelete').setVisible(false);
        Ext.getCmp('btnGroupMemberCancel').setVisible(true);
        frmGroupMember.show();
    },

    btnAddClick: function(button, e, eOpts) {
        var frmSchedulerEditor = Ext.create('MyApp.view.frmSchedulerEditor');
        frmSchedulerEditor.renderData.record = null;
        frmSchedulerEditor.show();
    },

    btnListTaskClick: function(button, e, eOpts) {
        Ext.getStore('StListTask').load({
            params:{
                typeTaskList: 1
            }
        });
    },

    btnHistoryTaskClick: function(button, e, eOpts) {
        Ext.getStore('StListTask').load({
            params:{
                typeTaskList: 2
            }
        });
    },

    btnMTGTaskClick: function(button, e, eOpts) {
        Ext.getStore('StListTask').load({
            params:{
                typeTaskList: 3
            }
        });
    },

    reloadScheduler: function(viewPreset) {
        var me = this,
            scheduler = Ext.getCmp('pnlSchedule'),
            dtpDate = Ext.getCmp('dtpDate'),
            btnNext = Ext.getCmp('btnNext'),
            btnPrev = Ext.getCmp('btnPrev'),
            selectDay = dtpDate.getValue();

        scheduler.resourceStore.loadData([],false);
        var t = MyApp.util.Utilities.scheduleMembersResource.length;
        if(viewPreset == 'hourAndDay'){
            for(var i = 0; i < t; i++){
                if(MyApp.util.Utilities.scheduleMembersResource[i].Id == MyApp.util.Utilities.userEmpInfo.EMP_ID){
                    var tmp = MyApp.util.Utilities.scheduleMembersResource[i];
                    MyApp.util.Utilities.scheduleMembersResource[i] = MyApp.util.Utilities.scheduleMembersResource[0];
                    MyApp.util.Utilities.scheduleMembersResource[0] = tmp;
                    break;
                }
            }
            scheduler.resourceStore.add(Ext.data.Record(MyApp.util.Utilities.scheduleMembersResource));
        }else{
            for(var i = 0; i < t; i++){
                if((MyApp.util.Utilities.scheduleMembersResource[i].Id * 1) % 1 === 0){
                    scheduler.resourceStore.add(MyApp.util.Utilities.scheduleMembersResource[i]);
                }
            }
        }
        if(MyApp.util.Utilities.scheduleMembersShouldLoad.length > 0){
            scheduler.setLoading(true);
            btnNext.setDisabled(true);
            btnPrev.setDisabled(true);
            Ext.Ajax.request({
                method: 'GET',
                url: apiUrl + 'schedule/LoadScheduleEvents',
                params: {idDate: selectDay, listStaff: Ext.encode(MyApp.util.Utilities.scheduleMembersShouldLoad)},
                success: function(response){
                    var data = Ext.decode(response.responseText, 1);
                    if(data.success){
                        scheduler.eventStore.add(Ext.data.Record(data.results));
                        MyApp.util.Utilities.scheduleMembersShouldLoad = [];
                        scheduler.setLoading(false);
                        btnNext.setDisabled(false);
                        btnPrev.setDisabled(false);
                    }
                },
                failure: function(error) {
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                    scheduler.setLoading(false);
                    btnNext.setDisabled(false);
                    btnPrev.setDisabled(false);
                }
            });
        }
        var orientation = 'horizontal';
        var resourceColumnWidth = 160;

        switch(viewPreset){
            case 'hourAndDay':
                var startDate = new Date(selectDay.getFullYear(), selectDay.getMonth(),selectDay.getDate(), Constant.SCHEDULE_TIME_START),
                    endDate = new Date(selectDay.getFullYear(), selectDay.getMonth(),selectDay.getDate(), Constant.SCHEDULE_TIME_END);
                orientation = 'vertical';
                break;
            case 'weekAndDay':
                var startDate = new Date(selectDay.getFullYear(), selectDay.getMonth(),selectDay.getDate(), 0),
                    endDate = new Date(selectDay.getFullYear(), selectDay.getMonth(),selectDay.getDate(), 24);
                orientation = 'horizontal';
                break;
            default:
                var startDate = new Date(selectDay.getFullYear(), selectDay.getMonth(), 1),
                    endDate = new Date(selectDay.getFullYear(), selectDay.getMonth(), new Date(selectDay.getFullYear(), selectDay.getMonth() + 1, 0).getDate() + 1);
                orientation = 'horizontal';
                break;
        }

        scheduler.resourceColumnWidth = resourceColumnWidth;
        scheduler.setOrientation(orientation);
        scheduler.switchViewPreset(viewPreset, startDate, endDate);
    },

    resetEventStore: function(month, newMonth) {
        if(month !== newMonth){
            MyApp.util.Utilities.scheduleMembersLoaded = [];
            Ext.getCmp('pnlSchedule').eventStore.loadData([], false);
            this.setScheduleMember();
        }else{
            this.reloadScheduler(Ext.getCmp('pnlSchedule').viewPreset);
        }
    },

    loadScheduleMember: function() {
        var cloneArrayEmp = MyApp.util.Utilities.scheduleMembers.slice(0);
        Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(child){
            child.set('checked', false);
            var index = cloneArrayEmp.indexOf(child.get('id') * 1);
            if(index != -1 || child.get('id') == MyApp.util.Utilities.userEmpInfo.EMP_ID){
                child.set('checked', true);
                cloneArrayEmp.splice(index, 1);
            }
            MyApp.app.common.checkParentNode(child);
        });
    },

    setScheduleMember: function() {
        MyApp.util.Utilities.scheduleMembersShouldLoad = [];
        MyApp.util.Utilities.scheduleMembers = [];
        MyApp.util.Utilities.scheduleMembersResource = [];
        Ext.getCmp('tpnMemberForSchedules').getView().node.cascadeBy(function(node){
            if(node.get('id') == MyApp.util.Utilities.userEmpInfo.EMP_ID){
                node.set('checked', true);
            }
            if(node.get('leaf') && node.get('checked')){
                var index;
                if(node.get('id') % 1 === 0){
                    MyApp.util.Utilities.scheduleMembers.push(node.get('id') * 1);
                    MyApp.util.Utilities.scheduleMembersResource.push({
                        'Id': node.get('id').toString(),
                        'Name': node.get('name')
                    });

                    index = MyApp.util.Utilities.scheduleMembersLoaded.indexOf(node.get('id') * 1);
                    if(index == -1){//If haven't
                        MyApp.util.Utilities.scheduleMembersLoaded.push(node.get('id') * 1);
                        MyApp.util.Utilities.scheduleMembersShouldLoad.push(node.get('id') * 1);
                    }
                }else{
                    MyApp.util.Utilities.scheduleMembers.push(node.get('id'));
                    MyApp.util.Utilities.scheduleMembersResource.push({
                        'Id': node.get('id').toString(),
                        'Name': node.get('name')
                    });

                    index = MyApp.util.Utilities.scheduleMembersLoaded.indexOf(node.get('id'));
                    if(index == -1){//If haven't
                        MyApp.util.Utilities.scheduleMembersLoaded.push(node.get('id'));
                        MyApp.util.Utilities.scheduleMembersShouldLoad.push(node.get('id'));
                    }
                }
            }
        });
        this.reloadScheduler(Ext.getCmp('pnlSchedule').viewPreset);

    },

    filterScheduleMember: function(record, first) {
        var store = Ext.getStore('StMembersGroups');
        var memberID = '';
        store.data.each(function(item){
            if(item.get('CUSTOM_ID') == record.get('CUSTOM_ID')){
                memberID = item.get('CUSTOM_MEMBER');
                return;
            }
        });
        MyApp.util.Utilities.scheduleMembers = [];
        if(memberID !== ''){
            MyApp.util.Utilities.scheduleMembers = memberID.split(',');
            for(var i = 0; i<MyApp.util.Utilities.scheduleMembers.length; i++){
                MyApp.util.Utilities.scheduleMembers[i] = MyApp.util.Utilities.scheduleMembers[i] * 1;
            }
            if(first){
                MyApp.util.Utilities.scheduleMembersLoaded = MyApp.util.Utilities.scheduleMembers.slice(0);
            }
        }
    },

    init: function(application) {
        this.control({
            "#btnDay": {
                click: this.btnDayClick
            },
            "#btnWeek": {
                click: this.btnWeekClick
            },
            "#btnMonth": {
                click: this.btnMonthClick
            },
            "#pnlSchedule": {
                eventdblclick: this.onEventDblClick
            },
            "#dtpDate": {
                select: this.dtpDateSelect,
                afterrender: this.dtpDateAfterRender
            },
            "#btnNext": {
                click: this.btnNextClick
            },
            "#btnPrev": {
                click: this.btnPrevClick
            },
            "#pnlSchedules": {
                afterrender: this.pnlSchedulesAfterRender
            },
            "#tpnMemberForSchedules": {
                checkchange: this.tpnMemberForSchedulesCheckChange
            },
            "#cboGroupMemberScheduler": {
                select: this.cboGroupMemberSchedulerSelect
            },
            "#btnGroupMemberEdit": {
                click: this.btnGroupMemberEditClick
            },
            "#btnGroupMemberAdd": {
                click: this.btnGroupMemberAddClick
            },
            "#btnAdd": {
                click: this.btnAddClick
            },
            "#btnListTask": {
                click: this.btnListTaskClick
            },
            "#btnHistoryTask": {
                click: this.btnHistoryTaskClick
            },
            "#btnMTGTask": {
                click: this.btnMTGTaskClick
            }
        });
    }

});
