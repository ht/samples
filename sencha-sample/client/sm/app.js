/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.Loader.setPath('Ext.grid.column.Column','packages/sencha-touch-grid/src/grid/column/Column.js');
Ext.Loader.setPath('Ext.grid.column.Template','packages/sencha-touch-grid/src/grid/column/Template.js');
Ext.Loader.setPath('Ext.grid.Grid','packages/sencha-touch-grid/src/grid/Grid.js');
Ext.Loader.setPath('Ext.grid.plugin.PagingToolbar','packages/sencha-touch-grid/src/grid/plugin/PagingToolbar.js');

Ext.application({

    requires: [
        'Ext.MessageBox',
        'Ext.navigation.View',
        'Ext.dataview.List',
        'Ext.data.Store',
        'Ext.Anim'
    ],
    models: [
        'MdListMessage',
        'MdMessage',
        'MdMessageType',
        'MdRecipients',
        'MdListSchedule',
        'MdEmployeeTest',
        'MdSidebarMenu',
        'MdEmployee',
        'MdSectionMaster',
        'MdGeneral',
        'MdGroupMember',
        'MdListTaskDetail',
        'MdCircle',
        'MdCircleGroup',
        'MdRoleCircle',
        'MdEmployeeLogin',
        'MdMessageComment'
    ],
    stores: [
        'StListMessage',
        'StMessage',
        'StMessageType',
        'StListSchedule',
        'StEmployeeTest',
        'StRoleCircle',
        'StSidebarMenu',
        'StEmployeeLogin',
        'StSectionMaster',
        'StCircleGroup',
        'StEmployeesSearch',
        'StEmployee',
        'StCriticalLevelsSearch',
        'StProgressesSearch',
        'StCriticalLevels',
        'StProgresses',
        'StFixedForm',
        'StGroupMember',
        'StListTaskDetail',
        'StRecipients',
        'StAddressCircle',
        'StEmployees',
        'StMessageComment'
    ],
    views: [
        'CpMessageFilter',
        'CpMessageAdvancedFilter',
        'CpListMessage',
        'CpAddEditMessage',
        'CpListSchedule',
        'CpAddEditSchedule',
        'CpChildListSchedule',
        'CpViewListSchedule',
        'CpCircle',
        'CpMain',
        'MainContainerView',
        'Sidebar',
        'CpNavigationToolbar',
        'CpLogin',
        'CpMessageFilterPanel',
        'CpMessageFilterContainer',
        'CpActionContainer',
        'UCEmployees',
        'CpInputViewComment'
    ],
    controllers: [
        'CMain',
        'CUCEmployees',
        'CSlideNavigation',
        'CLogin',
        'CAddEditMessage',
        'CAddEditSchedule',
        'CMessage',
        'CSchedule',
        'CCircle'
    ],
    name: 'HKD',

    launch: function() {

        Ext.Viewport.add([
            {xtype: 'cpLogin'}

        ]);
        //Define global variable
        Ext.define('HKD.util.Utilities', {
            userEmpInfo: null,
            singleton: true,
            selectSectionPublic: null,
            frmMessageStatusAddNew: null ,// when add new = true & edit = false,
            messageId : null,
            message: null,
            token: null,
            sessionID: null,
            arrayReciver:null,
            openedForm: false,
            SCHEDULE_ID:null,
            filterScheduler:'default',
            dtpDate: new Date(),
            viewPreset:2,   // 0 = Day, 1 = Week, 2 = Month
            ucEmployees: {
                showAutocompletePanel: false,
                loadData: false,
                employeeStoreClone: [],
                totalReceiver: 0
            }
        });
        Ext.Ajax._defaultHeaders = {
            'token': Global.authData.token
        };

        var storeIDs = [
            'StListMessage',
            'StEmployee',
            'StSectionMaster',
            'StCircleGroup',
            'StEmployeesSearch',
            'StProgressesSearch',
            'StProgresses',
            'StFixedForm',
            'StGroupMember',
            'StListTaskDetail',
            'StMessageComment'
        ];
        var i = 0;
        for(i = 0; i < storeIDs.length; i++){
            var store = Ext.getStore(storeIDs[i]);
            //console.log(store);
            if(store){
                //console.log(store.getProxy().getUrl());
                store.getProxy().setUrl(apiUrl + store.getProxy().getUrl());
                //console.log(store.getProxy().getUrl());
            }
        }
        Ext.getStore('StSectionMaster').load({
            callback: function(records, operation, success){
                if(success){
                    //console.log(success);
                    this.insert(0,{'EMP_SECTION_ID':null,'EMP_SECTION_NAME':null});
                }
            }
        });

        var cLogin = this.getController('CLogin');
        var cpLogin = cLogin.getCpLogin();
        //var cpMain = Ext.getCmp('CpMain');

        if(!Global.userLoged){
            Ext.getStore('StEmployee').load(function(){
                this.insert(0,{'EMP_ID':null,'EMP_NAME':null});
                cpLogin.show();
            });

        }else{
            Ext.Ajax._defaultHeaders = {
                'token': Global.authData.token,
                'sessionID': Global.authData.sessionID
            };
            Ext.Ajax.on("beforerequest", function(conn, options){
                var xmlhttp = null;
                if (window.XMLHttpRequest){
                    xmlhttp = new XMLHttpRequest();
                }
                else{
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                if(xmlhttp !== null){
                    xmlhttp.open("GET",phpClientUrl + "/site/checkLogin", false);
                    xmlhttp.send();
                    var data = Ext.decode(xmlhttp.responseText);
                    if(!data.success){
                        window.location = window.location;
                    }
                }
                else
                {
                    alert("Your browser does not support XMLHTTP.");
                }
            });
            HKD.util.Utilities.token = Global.authData.token;
            HKD.util.Utilities.sessionID = Global.authData.sessionID;
            HKD.util.Utilities.userEmpInfo = Global.authData.userEmpInfo;
            //Ext.getStore('StCircleGroupTree').load( {params: {userId:MyApp.util.Utilities.userEmpInfo.EMP_ID}});
            //Ext.getStore('StMessages').load();
            //Ext.getStore('StEmployeesSearch').load();
            Ext.getStore('StEmployeesSearch').load();

            Ext.getStore('StProgressesSearch').load();
            Ext.getStore('StGroupMember').load();
            Ext.getStore('StListMessage').load();
            Ext.Viewport.animateActiveItem({xtype : 'main'}, {type:'pop'});
            //Work.getWorkInfo(MyApp.util.Utilities.userEmpInfo.EMP_ID);
            Ext.getStore('StEmployee').load();
            Ext.getStore('StSectionMaster').load();
            Ext.getStore('StCircleGroup').load({
                callback: function(records, operation, success){
                    if(success){
                        //console.log(success);
                        this.insert(0,{'TITLE':null,'VALUE':null});
                    }
                }
            });
        }


    }

});
