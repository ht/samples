/*
 * File: app/controller/CAddEditMessage.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HKD.controller.CAddEditMessage', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            circleContainer: 'container#circleContainer',
            gridRecipientsContainer: 'container#gridRecipientsContainer'
        },

        control: {
            "button#btnAddMessageSave": {
                tap: 'onButtonTapBtnAddMessageSave'
            },
            "container#cpAddEditMessage": {
                initialize: 'onContainerInitializeCpAddEditMessage'
            },
            "button#btnAddMessageClose": {
                tap: 'onButtonTapbtnAddMessageClose'
            },
            "selectfield#cboFrmAddMsgReceiveType": {
                change: 'onSelectfieldChangeCboFrmAddMsgReceiveType'
            },
            "selectfield#cboFrmAddMsgFixedForm": {
                change: 'onSelectfieldChangeCboFrmAddMsgFixedForm'
            }
        }
    },

    onButtonTapBtnAddMessageSave: function(button, e, eOpts) {
        var requestUrl = apiUrl+'message/addMessage';
        var msgId = 0;

        if(Ext.getCmp('txtFrmAddMsgMsgTitle').getValue()===''){
            MessageCommon.showErrorMessage(MessageCommon.InputMsgTitle);
            return false;
        }

        if(Ext.getCmp('txtFrmAddMsgMsgText').getValue()===''){
            MessageCommon.showErrorMessage(MessageCommon.InputMsgText);
            return false;
        }

        if(HKD.util.Utilities.frmMessageStatusAddNew){
            if(Ext.getCmp('dtpFrmAddMsgExpilationDate').getValue() < MyApp.app.common.GetCurrentDate()){
                MessageCommon.showErrorMessage(MessageCommon.InvalidExpilationDate);
                return false;
            }
        }else{
            requestUrl = apiUrl+'message/updateMessage';
            msgId = HKD.util.Utilities.message.get('MSG_ID').trim();
        }

        var listEmployees = [];
        var circleId = null;

        if(Ext.getCmp('cboFrmAddMsgReceiveType').getValue() === 1){
            Ext.getStore('StEmployees').getData().each(function(record){
                listEmployees.push(record.get('EMP_ID'));
            });
        }else{
            circleId = Ext.getCmp('cboCircleGroup').getValue();
            if(circleId !== null){
                Ext.Ajax.request({
                    method: 'POST',
                    async: false,
                    url: apiUrl + 'master/loadCircleMemberMaster',
                    params: {circleId: circleId},
                    success: function(response){
                        var obj = Ext.decode(response.responseText);
                        if(obj.responseCode === 403){
                            MessageCommon.showErrorMessage(obj.responseMessage);
                            return;
                        }
                        if(obj.success === true){
                            if(obj.data.length > 0){
                                for(var i = 0; i < obj.data.length; i++){
                                    listEmployees.push(obj.data[i].EMP_ID);
                                }
                            }else{
                                MessageCommon.showErrorMessage(MessageCommon.MesErrorCircleGroupEmployeesNull);
                                return false;
                            }
                        }
                        else{
                            MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                            return false;
                        }
                    },
                    failure: function(response, options){
                        MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                        return false;
                    }
                });
            }else{
                MessageCommon.showErrorMessage(MessageCommon.CircleGroupNull);
                return false;
            }
        }
        if(listEmployees.length === 0){
            MessageCommon.showErrorMessage(MessageCommon.InvalidEmp);
            return false;
        }
        var dtpExpilationDate = MyApp.app.common.convertDateToYmd(Ext.getCmp('dtpFrmAddMsgExpilationDate').getValue());

        var fileAttach = 0;
        var arrayMessageInfo = {
            MSG_ID:msgId,
            IMPORTANT_LEVEL: Ext.getCmp('cboFrmAddMsgImportant').getValue(),
            ADD_EMP_ID: HKD.util.Utilities.userEmpInfo.EMP_ID,
            MSG_TITLE: Ext.getCmp('txtFrmAddMsgMsgTitle').getValue(),
            MSG_TEXT: Ext.getCmp('txtFrmAddMsgMsgText').getValue(),
            ATTACHFILE: fileAttach,
            MSG_GROUP_TEXT: '',
            EXPILATION_DATE:dtpExpilationDate,
            PROGRESS_ID: Ext.getCmp('cboFrmAddMsgProgress').getValue(),
            RELEASE_DATE: Ext.getCmp('txtFrmAddMsgReleaseDate').getValue(),
            CIRCLEID: circleId
        };

        Ext.Ajax.request({
            url: requestUrl,
            method: 'post',
            async: false,
            params:{
                messageInfo:Ext.encode(arrayMessageInfo),
                newReceiver:Ext.encode(listEmployees),
                oldReceiver:Ext.encode(HKD.util.Utilities.arrayReciver)
            },
            success: function(response, options){
                var res = Ext.decode(response.responseText);
                if(res.responseCode === 403){//authentication
                    MessageCommon.showErrorMessage(res.responseMessage);
                    return;
                }

                if(res.success === true){
                    Ext.getStore('StListMessage').load();
                    var mainDisplayView = Ext.getCmp('mainDisplayView');
                    mainDisplayView.removeAt(0);
                    mainDisplayView.add({
                        xtype: 'navigationview',
                        showAnimation: 'slide',
                        navigationBar: null,
                        items: [
                            {
                                xtype: 'navigationBar'
                            },
                            {
                                xtype: 'cpListMessage'
                            }
                        ]
                    });
                    Ext.getCmp('btnFilterMessage').show();
                }
                else{
                    MessageCommon.showInfoMessage(MessageCommon.OperationFail);
                }
            },
            failure: function(response, options){
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    onContainerInitializeCpAddEditMessage: function(component, eOpts) {
        if(Ext.getStore('StProgresses').getCount() === 0){
            Ext.getStore('StProgresses').load();
        }
        Ext.getCmp('dtpFrmAddMsgExpilationDate').getPicker().setYearTo(new Date(Global.serverTime).getFullYear() + 1);
        if(Ext.getStore('StCircleGroup').getCount() === 0){
            Ext.getStore('StCircleGroup').load({
                params: {empId:HKD.util.Utilities.userEmpInfo.EMP_ID},
                callback: function(records, operation, success) {
                    if(success){
                        Ext.getStore('StCircleGroup').insert(0,{'TITLE':null,'VALUE':null});
                    }
                },
                scope: this
            });
        }
        if(Ext.getStore('StFixedForm').getCount() === 0){
            Ext.getStore('StFixedForm').load(function(){
                Ext.getStore('StFixedForm').insert(0,{'TITLE':null,'VALUE':null});
                Ext.getCmp('cboFrmAddMsgFixedForm').setValue(null);
            });
        }

        if(HKD.util.Utilities.frmMessageStatusAddNew){
            var now = new Date(Global.serverTime);
            releaseDate = Ext.Date.format(now, 'Y/m/d');
            Ext.getCmp('txtFrmAddMsgReleaseDate').setValue(releaseDate);

            now.setDate(now.getDate() -1);

            Ext.getCmp('dtpFrmAddMsgExpilationDate').setValue(now);
            Ext.getCmp('cboFrmAddMsgProgress').setDisabled(true);
        }else{
            Ext.getCmp('cboFrmAddMsgFixedForm').setDisabled(true);
            if(HKD.util.Utilities.message !== null)
            {
                this.loadMessageInfoEdit(HKD.util.Utilities.message.get('MSG_ID').trim());
            }
        }
    },

    onButtonTapbtnAddMessageClose: function(button, e, eOpts) {
        var mainDisplayView = Ext.getCmp('mainDisplayView');
        mainDisplayView.removeAt(0);
        mainDisplayView.add({
            xtype: 'navigationview',
            showAnimation: 'slide',
            navigationBar: null,
            items: [
                {
                    xtype: 'navigationBar'
                },
                {
                    xtype: 'cpListMessage'
                }
            ]
        });
        Ext.getCmp('btnFilterMessage').show();
    },

    onSelectfieldChangeCboFrmAddMsgReceiveType: function(selectfield, newValue, oldValue, eOpts) {
        var circleContainer = this.getCircleContainer();
        var addressRecipientContainer = this.getGridRecipientsContainer();
        if(newValue === 2){
            circleContainer.show();
            addressRecipientContainer.hide();
        }else if(newValue === 1){
            addressRecipientContainer.show();
            circleContainer.hide();
        }
    },

    onSelectfieldChangeCboFrmAddMsgFixedForm: function(selectfield, newValue, oldValue, eOpts) {
        if(newValue !== null && HKD.util.Utilities.frmMessageStatusAddNew){
            Ext.getCmp('cboFrmAddMsgReceiveType').setValue(1);

            var me = this;

            Ext.Ajax.request({
                url: apiUrl+'Message/loadFixedFormMsg',
                method: 'post',
                params:{
                    FixedFormId:newValue
                },
                success: function(response, options){

                    var res = Ext.decode(response.responseText);
                    if(res.responseCode === 403){
                        MessageCommon.showErrorMessage(res.responseMessage);
                        return;
                    }

                    if(res.success)
                    {
                        Ext.getCmp('txtFrmAddMsgMsgText').setValue(res.data.FORM_TEXT);
                    }
                },
                failure: function(response, options){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });
            Ext.Ajax.request({
                url: apiUrl+'message/loadFixedFormReciever',
                method: 'post',
                params:{
                    FixedFormId:newValue
                },
                success: function(response, options){
                    var res = Ext.decode(response.responseText);
                    if(res.responseCode === 403){
                        MessageCommon.showErrorMessage(res.responseMessage);
                        return;
                    }
                    if(res.success)
                    {
                        for (var prop in res.data) {
                            for(var i = 0; i < HKD.util.Utilities.ucEmployees.employeeStoreClone.length; i++){
                                if(HKD.util.Utilities.ucEmployees.employeeStoreClone[i].EMP_ID == res.data[prop].EMP_ID.trim()){
                                    Ext.getStore('StEmployees').add({
                                        EMP_ID: res.data[prop].EMP_ID,
                                        EMP_NAME: res.data[prop].EMP_NAME.replace(/&nbsp;/g, '')
                                    });
                                    HKD.util.Utilities.ucEmployees.employeeStoreClone.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    }
                },
                failure: function(response, options){
                    MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                }
            });
        }

    },

    loadMessageInfoEdit: function(msgID) {
        Ext.Ajax.request({
            url: apiUrl + 'message/loadMessageInfo',
            params:{
                msgID:msgID
            },
            success: function(response, options){
                var res = Ext.decode(response.responseText);
                if(res.responseCode === 403){
                    MessageCommon.showErrorMessage(res.responseMessage);
                    return;
                }
                if(res.success){
                    Ext.getCmp('txtFrmAddMsgReleaseDate').setValue(res.data.RELEASE_DATE);
                    Ext.getCmp('txtFrmAddMsgMsgTitle').setValue(res.data.MSG_TITLE);
                    Ext.getCmp('cboFrmAddMsgImportant').setValue(res.data.IMPORTANT_LEVEL);

                    Ext.getCmp('cboFrmAddMsgProgress').setValue(res.data.PROGRESS_ID);
                    Ext.getCmp('txtFrmAddMsgMsgText').setValue(res.data.MSG_TEXT);

                    var expilationDate = new Date(res.data.EXPILATION_DATE);
                    Ext.getCmp('dtpFrmAddMsgExpilationDate').setValue(expilationDate);
                }else{
                    MessageCommon.showErrorMessage(MessageCommon.MessageCommon.MesErrorExecute);
                }
            },
            failure: function(response, options){
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });

        var me = this;

        var sCircle = null;

        Ext.Ajax.request({
            url: apiUrl + 'message/loadMessageCircle',
            method: 'post',
            params:{
                msgID:msgID
            },
            success: function(response, options){

                var res = Ext.decode(response.responseText);
                if(res.responseCode === 403){
                    MessageCommon.showErrorMessage(res.responseMessage);
                    return;
                }
                if(res.success)
                {
                    sCircle = res.data.CIRCLE_ID;
                    Ext.getCmp('cboFrmAddMsgReceiveType').setValue(2);
                    Ext.getCmp('cboCircleGroup').setValue(sCircle);
                }
                me.loadSetReceiver(msgID, sCircle);
            },
            failure: function(response, options){
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    },

    loadSetReceiver: function(msgID, sCircle, haveCircle) {
        var me = this;
        Ext.Ajax.request({
            url: apiUrl+'main/loadEmloyeeForMessage',
            method: 'post',
            params:{msgID:msgID},
            success: function(response, options){
                var res = Ext.decode(response.responseText);
                if(res.responseCode === 403){
                    MessageCommon.showErrorMessage(res.responseMessage);
                    return;
                }
                var arr = [];
                for (var prop in res.data) {
                    arr.push(res.data[prop].EMP_ID);
                    if(sCircle === null){
                        Ext.getStore('StEmployees').add({
                            EMP_ID: res.data[prop].EMP_ID,
                            EMP_NAME: res.data[prop].EMP_NAME.replace(/&nbsp;/g, '')
                        });
                        for(var i = 0; i < HKD.util.Utilities.ucEmployees.employeeStoreClone.length; i++){
                            if(HKD.util.Utilities.ucEmployees.employeeStoreClone[i].EMP_ID == res.data[prop].EMP_ID.trim()){
                                HKD.util.Utilities.ucEmployees.employeeStoreClone.splice(i, 1);
                                break;
                            }
                        }
                    }

                }
                HKD.util.Utilities.arrayReciver = arr;
            },
            failure: function(response, options){
                MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
            }
        });
    }

});