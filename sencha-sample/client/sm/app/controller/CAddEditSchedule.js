/*
 * File: app/controller/CAddEditSchedule.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HKD.controller.CAddEditSchedule', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            txtTitle: 'textfield#txtTitle',
            txtStartDate: 'textfield#txtStartDate',
            txtEndDate: 'textfield#txtEndDate',
            chkAllDay: 'checkboxfield#chkAllDay',
            cmbScheduleType: 'selectfield#cmbScheduleType',
            cmbRoom: 'selectfield#cmbRoom',
            cmbSectionSchedule: 'selectfield#cmbSectionSchedule',
            cmbJobName: 'selectfield#cmbJobName',
            chkOnlyActive: 'checkboxfield#chkOnlyActive',
            cmbProject: 'selectfield#cmbProject',
            cmbStaffStatus: 'selectfield#cmbStaffStatus',
            gridEmployees: 'grid#gridEmployees',
            txtRemarks: 'textareafield#txtRemarks',
            chkClosedFlag: 'checkboxfield#chkClosedFlag',
            chkUnLockFlag: 'checkboxfield#chkUnLockFlag',
            btnDeleteSchedule: 'button#btnDeleteSchedule',
            cpAddEditSchedule: 'container#cpAddEditSchedule',
            cpChildListSchedule: 'container#cpChildListSchedule',
            txtEmployees: 'textfield#txtEmployees',
            mainDisplayView: 'panel#mainDisplayView',
            filterMessageBtn: 'button#btnFilterMessage'
        },

        control: {
            "textfield#txtStartDate": {
                focus: 'onTextfieldFocusStartDate'
            },
            "textfield#txtEndDate": {
                focus: 'onTextfieldFocusEndDate'
            },
            "checkboxfield#chkAllDay": {
                change: 'onCheckboxfieldChangeAllDay'
            },
            "container#cpAddEditSchedule": {
                show: 'onContainerShowAddEditSchedule'
            },
            "checkboxfield#chkOnlyActive": {
                change: 'onCheckboxfieldChangeOnlyActive'
            },
            "selectfield#cmbSectionSchedule": {
                change: 'onSelectfieldChangeSectionSchedule'
            },
            "selectfield#cmbProject": {
                change: 'onSelectfieldChangeProject'
            },
            "button#btnSaveSchedule": {
                tap: 'onButtonTapSaveSchedule'
            },
            "button#btnDeleteSchedule": {
                tap: 'onButtonTapDeleteSchedule'
            },
            "button#btnCloseSchedule": {
                tap: 'onButtonTapCloseSchedule'
            }
        }
    },

    onTextfieldFocusStartDate: function(textfield, e, eOpts) {


        var chkAllDay = this.getChkAllDay();
        if(chkAllDay.getChecked())
            Picker.showPicker(1,textfield);
        else
            Picker.showPicker(3,textfield);

        // save string startdate
        //var txtStartDate = this.getTxtStartDate();
        //localStorage.setItem('strStart',txtStartDate.getValue());
    },

    onTextfieldFocusEndDate: function(textfield, e, eOpts) {
        var chkAllDay = this.getChkAllDay();
        if(chkAllDay.getChecked())
            Picker.showPicker(1,textfield);
        else
            Picker.showPicker(3,textfield);

        // save string enddate
        //var txtEndDate = this.getTxtEndDate();
        //localStorage.setItem('strEnd',txtEndDate.getValue());
    },

    onCheckboxfieldChangeAllDay: function(checkboxfield, newValue, oldValue, eOpts) {
        var txtStartDate = this.getTxtStartDate();
        var txtEndDate = this.getTxtEndDate();

        // var strStart = localStorage.getItem('strStart');
        // var strEnd = localStorage.getItem('strEnd');
        if(newValue)
        {
            txtStartDate.setPlaceHolder("yyyy/mm/dd");
            txtEndDate.setPlaceHolder("yyyy/mm/dd");

            if(txtStartDate.getValue().length == 16)
            {
                txtStartDate.setValue(txtStartDate.getValue().substring(0,10));
            }
            if(txtEndDate.getValue().length == 16)
            {
                txtEndDate.setValue(txtEndDate.getValue().substring(0,10));
            }
        }
        else
        {
            txtStartDate.setPlaceHolder("yyyy/mm/dd hh:mm");
            txtEndDate.setPlaceHolder("yyyy/mm/dd hh:mm");

            if(txtStartDate.getValue().length == 10)
            {
                txtStartDate.setValue(txtStartDate.getValue() + " " + "00:00");
            }

            if(txtEndDate.getValue().length == 10)
            {
                txtEndDate.setValue(txtEndDate.getValue() + " " +  "00:00");
            }
        }
    },

    onContainerShowAddEditSchedule: function(component, eOpts) {

        if(HKD.util.Utilities.SCHEDULE_ID == Constant.NEW_OBJECT_ID)
        {
            // load init
            this.loadDataInit();

            // hide button delete
            this.getBtnDeleteSchedule().hide();
        }
        else
        {
            // load edit
            this.loadDataEdit();

            // hide button delete
            this.getBtnDeleteSchedule().show();
        }


    },

    onCheckboxfieldChangeOnlyActive: function(checkboxfield, newValue, oldValue, eOpts) {
        var chkOnlyActive = this.getChkOnlyActive();
        var cmbProject = this.getCmbProject();
        var cmbJobName = this.getCmbJobName();

        //if(!HKD.util.Utilities.STATUS_LOAD)
        //{
            cmbProject.setOptions([]);
            cmbJobName.setOptions([]);
        //if(newValue)
            this.bindProject(newValue);
        //}
    },

    onSelectfieldChangeSectionSchedule: function(selectfield, newValue, oldValue, eOpts) {
        var chkOnlyActive = this.getChkOnlyActive();
        var cmbProject = this.getCmbProject();
        var cmbJobName = this.getCmbJobName();

        //if(!HKD.util.Utilities.STATUS_LOAD)
        //{
            cmbProject.setOptions([]);
            cmbJobName.setOptions([]);
            this.bindProject(chkOnlyActive.getChecked());

        //}
    },

    onSelectfieldChangeProject: function(selectfield, newValue, oldValue, eOpts) {
        var cmbJobName = this.getCmbJobName();

        //if(!HKD.util.Utilities.STATUS_LOAD)
        //{
            cmbJobName.setOptions([]);
        if(newValue)
            this.bindJob(newValue);
        //}
    },

    onButtonTapSaveSchedule: function(button, e, eOpts) {
        // open marks
        task.delay(500);

        var cls = this;
        // check input
        if(!this.validateSaveSchedule())
            return;


        //set array staff------------------------------have to edit
        var dataStaff = Ext.getStore('StEmployees').getData();
        var arr_staff = new Array();
        // push staff login
        arr_staff.push({EMP_NAME: HKD.util.Utilities.userEmpInfo.EMP_NAME, EMP_ID: HKD.util.Utilities.userEmpInfo.EMP_ID});
        // push staffs different
        for(i=0; i<dataStaff.length; i++)
        {
            var staff = {EMP_NAME: dataStaff.getAt(i).get('EMP_NAME'), EMP_ID: dataStaff.getAt(i).get('EMP_ID')};
            arr_staff.push(staff);
        }
        arr_staff = JSON.stringify(arr_staff);


        var schedule_id = HKD.util.Utilities.SCHEDULE_ID;
        var title = this.getTxtTitle().getValue();
        var remarks = this.getTxtRemarks().getValue();
        var start_datetime = this.getTxtStartDate().getValue();
        var end_datetime = this.getTxtEndDate().getValue();
        var room_id = this.getCmbRoom().getValue();
        var active_flag = 1;
        var opened_flag = this.getChkClosedFlag().getChecked() ? 0:1;
        var lock_flag = this.getChkUnLockFlag().getChecked() ? 0:1;
        var staff_id = HKD.util.Utilities.userEmpInfo.EMP_ID;
        var lastupdate_staff_id = HKD.util.Utilities.userEmpInfo.EMP_ID;
        var job_id = this.getCmbJobName().getValue();
        var schedule_type_id = this.getCmbScheduleType().getValue();

        Ext.Ajax.request({
            params: {SCHEDULE_ID: schedule_id,
                     TITLE: title,
                     REMARKS: remarks,
                     START_DATETIME: start_datetime,
                     END_DATETIME: end_datetime,
                     ROOM_ID: room_id,
                     ACTIVE_FLAG: active_flag,
                     OPENED_FLAG: opened_flag,
                     LOCK_FLAG: lock_flag,
                     STAFF_ID: staff_id,
                     LASTUPDATE_STAFF_ID: lastupdate_staff_id,
                     JOB_ID: job_id,
                     SCHEDULE_TYPE_ID: schedule_type_id,
                     ARR_STAFF: arr_staff},    // Data json transfer to server
            //async: false,
            url: apiUrl + 'schedule/SaveSchedule',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result == "false" || result === false)		// Has error at server
                {
                    MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                    task.cancel();
                    Ext.Viewport.unmask();
                }
                else						// Server ok
                {
                    if(result.length === 0)
                    {

                    }
                    else
                    {
                        HKD.app.getController('CUCEmployees').resetUCEmployees();
                        var mainDisplayView = cls.getMainDisplayView();
                        mainDisplayView.removeAt(0);
                        mainDisplayView.add({
                            xtype: 'navigationview',
                            showAnimation: 'slide',
                            navigationBar: null,
                            items: [
                                {
                                    xtype: 'navigationBar'
                                },
                                {
                                    xtype: 'cpListSchedule'
                                }
                            ]
                        });
                        view_preset = HKD.util.Utilities.viewPreset;
                        group = HKD.util.Utilities.filterScheduler;
                        if(group == "default")
                            group = "";
                        date = HKD.util.Utilities.dtpDate;
                        var cSCheduler = HKD.app.getController('CSchedule');
                        cSCheduler.onReloadScheduler(view_preset,date,group);
                        cls.getFilterMessageBtn().hide();
                        ////

                        // reset schedule id
                        HKD.util.Utilities.SCHEDULE_ID = Constant.NEW_OBJECT_ID;

                        task.cancel();
                        Ext.Viewport.unmask();
                    }

                }
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                task.cancel();
                Ext.Viewport.unmask();
            }
        });


    },

    onButtonTapDeleteSchedule: function(button, e, eOpts) {
        var cls = this;
        var msg = "スケジュール「"+this.getTxtTitle().getValue()+"」を削除します。<br>よろしいですか？";
        Ext.Msg.confirm("確認する", msg, function(btn){
            if (btn == 'yes'){
                data = JSON.stringify({EventId: HKD.util.Utilities.SCHEDULE_ID});
                Ext.Ajax.request({
                    params: {arrayScheduleInfo: data},    // Data json transfer to server
                    url: apiUrl + 'schedule/DeleteSchedule',
                    success: function (resp) {
                        var result = JSON.parse(resp.responseText);  // Parse data return
                        if(result.success == "false" || result.success === false)		// Has error at server
                            MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                        else						// Server ok
                        {
                            HKD.app.getController('CUCEmployees').resetUCEmployees();
                            var mainDisplayView = cls.getMainDisplayView();
                            mainDisplayView.removeAt(0);
                            mainDisplayView.add({
                                xtype: 'navigationview',
                                showAnimation: 'slide',
                                navigationBar: null,
                                items: [
                                    {
                                        xtype: 'navigationBar'
                                    },
                                    {
                                        xtype: 'cpListSchedule'
                                    }
                                ]
                            });
                            view_preset = HKD.util.Utilities.viewPreset;
                            group = HKD.util.Utilities.filterScheduler;
                            if(group == "default")
                                group = "";
                            date = HKD.util.Utilities.dtpDate;
                            var cSCheduler = HKD.app.getController('CSchedule');
                            cSCheduler.onReloadScheduler(view_preset,date,group);
                            cls.getFilterMessageBtn().hide();
                            ////

                            // reset schedule id
                            HKD.util.Utilities.SCHEDULE_ID = Constant.NEW_OBJECT_ID;

                        }
                    },
                    failure: function () {
                        MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                    }
                });

            }
        });
    },

    onButtonTapCloseSchedule: function(button, e, eOpts) {
        HKD.app.getController('CUCEmployees').resetUCEmployees();
        var mainDisplayView = this.getMainDisplayView();
        mainDisplayView.removeAt(0);
        mainDisplayView.add({
            xtype: 'navigationview',
            showAnimation: 'slide',
            navigationBar: null,
            items: [
                {
                    xtype: 'navigationBar'
                },
                {
                    xtype: 'cpListSchedule'
                }
            ]
        });
        view_preset = HKD.util.Utilities.viewPreset;
        group = HKD.util.Utilities.filterScheduler;
        if(group == "default")
            group = "";
        date = HKD.util.Utilities.dtpDate;
        var cSCheduler = HKD.app.getController('CSchedule');
        cSCheduler.onReloadScheduler(view_preset,date,group);
        cls.getFilterMessageBtn().hide();
        ////

        // reset schedule id
        HKD.util.Utilities.SCHEDULE_ID = Constant.NEW_OBJECT_ID;
    },

    loadDataInit: function() {
        // load base: schedule type, room, section, staff status
        this.loadBasic();

        //Set value default
        this.getTxtTitle().setValue("");
        this.getChkAllDay().setChecked(false);


        // set date
        var txtStartDate = this.getTxtStartDate();
        var txtEndDate = this.getTxtEndDate();
        var curDate = new Date();								// current date
        var strCurDate = Picker.formatDate(curDate, 3);			// string current date
        txtStartDate.setValue(strCurDate);						// set to textbox
        curHour = (curDate.getHours() + 1) >=10 ? (curDate.getHours() + 1): "0" + (curDate.getHours() + 1);

        var strEndDate = strCurDate.substring(0,11) + curHour + strCurDate.substring(13,16);	// string end date
        txtEndDate.setValue(strEndDate);						// set to textbox

        this.getCmbScheduleType().setValue(Constant.NEW_OBJECT_ID);
        this.getCmbRoom().setValue(Constant.NEW_OBJECT_ID);

        this.getChkOnlyActive().setChecked(false);

        this.getTxtRemarks().setValue("");
        this.getCmbStaffStatus().setValue(Constant.NEW_OBJECT_ID);
        this.getChkClosedFlag().setChecked(false);
        this.getChkUnLockFlag().setChecked(true);

        this.getTxtEmployees().setValue("");
        //

        // set SCHEDULE_ID
        HKD.util.Utilities.SCHEDULE_ID = Constant.NEW_OBJECT_ID;


        // remove staff login in filter
        var arr_staff = HKD.util.Utilities.ucEmployees.employeeStoreClone;
        var len = arr_staff.length;
        for(var i=0; i < len; i++){
            if(arr_staff[i].EMP_ID == HKD.util.Utilities.userEmpInfo.EMP_ID)
            {
                // remove acemp id login in array staff
                HKD.util.Utilities.ucEmployees.employeeStoreClone.splice(i, 1);
                break;
            }
        }
    },

    loadDataEdit: function() {
        var cls = this;

        // set status load
        HKD.util.Utilities.STATUS_LOAD = true;

        Ext.Ajax.request({
            params: {SCHEDULE_ID: HKD.util.Utilities.SCHEDULE_ID,
                    STAFF_ID : HKD.util.Utilities.userEmpInfo.EMP_ID},    // Data json transfer to server
            url: apiUrl + 'schedule/LoadDataForEdit',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result == "false" || result === false)		// Has error at server
                {
                    MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                    task.cancel();
                    Ext.Viewport.unmask();
                }
                else						// Server ok
                {
                    if(result.DataSchedule.length === 0)
                    {

                    }
                    else
                    {
                        cls.getTxtTitle().setValue(result.DataSchedule[0].TITLE);
                        if(result.DataSchedule[0].START_DATETIME.substring(11,16) == "00:00" && result.DataSchedule[0].END_DATETIME.substring(11,16) == "00:00")
                        {
                            cls.getTxtStartDate().setValue(result.DataSchedule[0].START_DATETIME.substring(0,10));
                            cls.getTxtEndDate().setValue(result.DataSchedule[0].END_DATETIME.substring(0,10));
                            cls.getChkAllDay().setChecked(true);
                        }
                        else
                        {
                            cls.getTxtStartDate().setValue(result.DataSchedule[0].START_DATETIME.substring(0,16));
                            cls.getTxtEndDate().setValue(result.DataSchedule[0].END_DATETIME.substring(0,16));
                            cls.getChkAllDay().setChecked(false);

                            cls.getTxtRemarks().setValue(result.DataSchedule[0].REMARKS);

                            var opened_flag = result.DataSchedule[0].OPENED_FLAG =0 ? true:false;
                            var lock_flag = result.DataSchedule[0].LOCK_FLAG =0 ? true:false;
                            cls.getChkClosedFlag().setChecked(opened_flag);
                            cls.getChkUnLockFlag().setChecked(lock_flag);

                        }
                        // Save object schedule
                        HKD.util.Utilities.Schedule = result.DataSchedule[0];
                        cls.loadBasic();
                    }
                }
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                task.cancel();
                Ext.Viewport.unmask();
            }
        });


        //load schedule staff
        this.bindScheduleStaff(HKD.util.Utilities.SCHEDULE_ID);
    },

    loadBasic: function() {
        // open marks
        task.delay(500);

        cls = this;
        var cmbScheduleType = this.getCmbScheduleType();
        var cmbRoom = this.getCmbRoom();
        var cmbSectionSchedule = this.getCmbSectionSchedule();
        var cmbStaffStatus = this.getCmbStaffStatus();
        var chkOnlyActive = this.getChkOnlyActive();
        Ext.Ajax.request({
            //params: {WORKRECORD_ID: workrecord},    // Data json transfer to server
            url: apiUrl + 'schedule/LoadDataForAddNew',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result == "false" || result === false)		// Has error at server
                {
                    MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                    task.cancel();
                    Ext.Viewport.unmask();
                }
                else						// Server ok
                {
                    if(result.length === 0)
                    {

                    }
                    else
                    {
                        //result.ScheduleType.unshift({SCHEDULE_TYPE:'',SCHEDULE_TYPE_ID:-1});
                        result.Room.unshift({TITLE:'',VALUE:-1});
                        result.Section.unshift({SECTION_NAME:'参加プロジェクト',SECTION_ID:-1});




                        cmbScheduleType.setOptions(result.ScheduleType);
                        cmbRoom.setOptions(result.Room);
                        cmbSectionSchedule.setOptions(result.Section);
                        cmbStaffStatus.setOptions(result.StaffStatus);

                        cmbStaffStatus.setValue(Constant.NEW_OBJECT_ID);

                        // case load edit set value
                        if(HKD.util.Utilities.SCHEDULE_ID != Constant.NEW_OBJECT_ID)
                        {
                            cmbScheduleType.setValue(HKD.util.Utilities.Schedule.SCHEDULE_TYPE_ID);

                            room_id = HKD.util.Utilities.Schedule.ROOM_ID ? HKD.util.Utilities.Schedule.ROOM_ID : -1;
                            cmbRoom.setValue(room_id);

                            section_id = HKD.util.Utilities.Schedule.SECTION_ID ? HKD.util.Utilities.Schedule.SECTION_ID : -1;
                            cmbSectionSchedule.setValue(section_id);

                            cmbStaffStatus.setValue(HKD.util.Utilities.Schedule.STATUS_ID);
                        }
                        else
                        {
                            cmbSectionSchedule.setValue(Constant.NEW_OBJECT_ID);
                        }
                        //cls.bindProject(chkOnlyActive.getChecked());

                    }
                }
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                task.cancel();
                Ext.Viewport.unmask();
            }
        });
    },

    bindProject: function(active) {
        var cls = this;
        var cmbSectionSchedule = this.getCmbSectionSchedule();
        var cmbProject = this.getCmbProject();
        var chkOnlyActive = this.getChkOnlyActive();
        Ext.Ajax.request({
            params: {EMP_ID: HKD.util.Utilities.userEmpInfo.EMP_ID,
                     CMB_SECTION_VALUE: cmbSectionSchedule.getValue(),
                     EMP_SECTION_ID: HKD.util.Utilities.userEmpInfo.EMP_SECTION_ID,
                     ACTIVE: active},    // Data json transfer to server
            url: apiUrl + 'schedule/GetProjectForSection',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result == "false" || result === false)		// Has error at server
                {
                    MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                    task.cancel();
                    Ext.Viewport.unmask();
                }
                else						// Server ok
                {
                    if(result.length === 0)
                    {

                    }
                    else
                    {
                        result.Project.unshift({PROJECT_NAME:'',PROJECT_ID:-1});
                        cmbProject.setOptions(result.Project);

                        // case load edit set value
                        if(HKD.util.Utilities.SCHEDULE_ID != Constant.NEW_OBJECT_ID)
                        {
                            cmbProject.setValue(HKD.util.Utilities.Schedule.PROJECT_ID);

                            //cls.bindJob(HKD.util.Utilities.Schedule.PROJECT_ID);
                        }
                        else
                        {
                            cmbProject.setValue(Constant.NEW_OBJECT_ID);
                        }
                    }

                }
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                task.cancel();
                Ext.Viewport.unmask();
            }
        });
    },

    bindJob: function(project_id) {

        var cmbSectionSchedule = this.getCmbSectionSchedule();
        var cmbProject = this.getCmbProject();
        var chkOnlyActive = this.getChkOnlyActive();
        var cmbJobName = this.getCmbJobName();
        Ext.Ajax.request({
            params: {EMP_ID: HKD.util.Utilities.userEmpInfo.EMP_ID,
                     CMB_SECTION_VALUE: cmbSectionSchedule.getValue(),
                     EMP_SECTION_ID: HKD.util.Utilities.userEmpInfo.EMP_SECTION_ID,
                     ACTIVE: chkOnlyActive.getChecked(),
                     PROJECT_ID: project_id},    // Data json transfer to server
            async: false,
            url: apiUrl + 'schedule/GetJobForProject',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result == "false" || result === false)		// Has error at server
                    MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                else						// Server ok
                {
                    if(result.length === 0)
                    {

                    }
                    else
                    {
                        result.Job.unshift({JOB_NAME:'',JOB_ID:-1});

                        cmbJobName.setOptions(result.Job);

                        // case load edit set value
                        if(HKD.util.Utilities.SCHEDULE_ID != Constant.NEW_OBJECT_ID )
                        {
                            cmbJobName.setValue(HKD.util.Utilities.Schedule.JOB_ID);
                        }
                    }


                }
                task.cancel();
                Ext.Viewport.unmask();
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                task.cancel();
                Ext.Viewport.unmask();
            }
        });
    },

    bindScheduleStaff: function(schedule_id) {
        Ext.Ajax.request({
            params: {SCHEDULE_ID: schedule_id},    // Data json transfer to server
            url: apiUrl + 'schedule/GetScheduleStaff',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result == "false" || result === false)		// Has error at server
                {
                    MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                    task.cancel();
                    Ext.Viewport.unmask();
                }
                else						// Server ok
                {
                    if(result.length === 0)
                    {

                    }
                    else
                    {
                        // remove staffs in filter
                        var arr_staff = HKD.util.Utilities.ucEmployees.employeeStoreClone;
                        for(i=0; i < result.ScheduleStaff.length; i++)
                            for(j=0; j < arr_staff.length; j++){
                                if(arr_staff[j].EMP_ID == result.ScheduleStaff[i].EMP_ID)
                                {
                                    // remove acemp id login in array staff
                                    HKD.util.Utilities.ucEmployees.employeeStoreClone.splice(j, 1);
                                    break;
                                }
                            }

                        // romove staff login in store for grid to don't show it on grid
                        for(var i=0; i < result.ScheduleStaff.length; i++){
                            if(result.ScheduleStaff[i].EMP_ID == HKD.util.Utilities.userEmpInfo.EMP_ID)
                            {
                                // remove acemp id login in array staff
                                result.ScheduleStaff.splice(i, 1);
                                break;
                            }
                        }

                        //Add items staff
                        storeStaff = Ext.getStore('StEmployees');
                        storeStaff.load();

                        storeStaff.add(result.ScheduleStaff);
                        storeStaff.sync();
                    }
                }
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                task.cancel();
                Ext.Viewport.unmask();
            }
        });
    },

    validateSaveSchedule: function() {
        var txtTitle = this.getTxtTitle();
        var txtStartDate = this.getTxtStartDate();
        var txtEndDate = this.getTxtEndDate();
        var cmbRoom =this.getCmbRoom();
        var strMessage = "";
        if(txtTitle.getValue()==="")
        {
            task.cancel();
            Ext.Viewport.unmask();

            strMessage += "・タイトルを入力してください";
            MessageCommon.showErrorSM(strMessage);
            return false;
        }
        else if(txtStartDate.getValue()==="")
        {
            task.cancel();
            Ext.Viewport.unmask();

            strMessage += "・開始時刻を入力してください";
            MessageCommon.showErrorSM(strMessage);
            return false;

        }
        else if(txtEndDate.getValue()==="")
        {
            task.cancel();
            Ext.Viewport.unmask();

            strMessage += "・終了時刻を入力してください";
            MessageCommon.showErrorSM(strMessage);
            return false;

        }
        // start date < end date
        else if(!this.compare2Date(txtStartDate.getValue(),txtEndDate.getValue()))
        {
            task.cancel();
            Ext.Viewport.unmask();

            strMessage += "・終了日時が、開始日時より前です";
            MessageCommon.showErrorSM(strMessage);
            return false;
        }
        // is all day and room id != -1
        else if(this.getChkAllDay().getChecked() && this.getCmbRoom().getValue() != -1)
        {
            task.cancel();
            Ext.Viewport.unmask();

            strMessage += "■会議室チェックに失敗しました<br/>・開始日時、終了日時が不明";
            MessageCommon.showErrorSM(strMessage);
            return false;
        }
        else if(cmbRoom.getValue() != Constant.NEW_OBJECT_ID)
        {
            if(!this.checkRoom())
                return false;
        }
        return true;


    },

    compare2Date: function(strStartDate, strEndDate) {


        yearStart = parseInt(strStartDate.substring(0,4),10);
        monthStart = parseInt(strStartDate.substring(5,7),10);
        dayStart  = parseInt(strStartDate.substring(8,10),10);
        hourStart = strStartDate.substring(11,13) ? parseInt(strStartDate.substring(11,13),10) : 0;
        minuteStart = strStartDate.substring(14,16) ? parseInt(strStartDate.substring(14,16),10) : 0;


        yearEnd = parseInt(strEndDate.substring(0,4),10);
        monthEnd = parseInt(strEndDate.substring(5,7),10);
        dayEnd  = parseInt(strEndDate.substring(8,10),10);
        hourEnd = strEndDate.substring(11,13) ? parseInt(strEndDate.substring(11,13),10) : 0;
        minuteEnd = strEndDate.substring(14,16) ? parseInt(strEndDate.substring(14,16),10) : 0;


        var startDate = new Date(yearStart, monthStart, dayStart, hourStart, minuteStart);
        var endDate = new Date(yearEnd, monthEnd, dayEnd, hourEnd, minuteEnd);

        if (startDate > endDate) {
            return false;
        }
        else
            return true;
    },

    checkRoom: function() {
        var blCheckRoom;	// true : check ok, false: check not ok

        var roomId = this.getCmbRoom().getValue();
        var startDate = this.getTxtStartDate().getValue();
        var endDate = this.getTxtEndDate().getValue();

        var scheduleId;
        if(HKD.util.Utilities.SCHEDULE_ID == Constant.NEW_OBJECT_ID )
            scheduleId = "";
        else
            scheduleId = HKD.util.Utilities.SCHEDULE_ID;

        Ext.Ajax.request({
            params: {scheduleid: scheduleId,
                     startdate: JSON.stringify(startDate),
                     enddate: JSON.stringify(endDate),
                     room: roomId},    // Data json transfer to server
            async: false,
            url: apiUrl + 'schedule/CheckRoom',
            success: function (resp) {
                var result = JSON.parse(resp.responseText);  // Parse data return
                if(result !== "")		// Has error at server
                {
                    task.cancel();
                    Ext.Viewport.unmask();

                    MessageCommon.showErrorSM(result);
                    blCheckRoom = false;
                }
                else						// Server ok
                {
                    blCheckRoom = true;
                }
            },
            failure: function () {
                MessageCommon.showErrorSM(MessageCommon.MesErrorAtServer);
                blCheckRoom = false;
                task.cancel();
                Ext.Viewport.unmask();

            }
        });

        return blCheckRoom;
    }

});