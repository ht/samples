/*
 * File: app/controller/CSchedule.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HKD.controller.CSchedule', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            cpListSchedule: 'container#cpListSchedule',
            tapSchedule: 'tabpanel#mytabpanel',
            ctnGroupSchedule: 'container#ctnGroupSchedule',
            filterSchedule: 'selectfield#cmbFilterScheduler',
            ctnSchedule: 'container#ctnSchedule',
            mainContainerView: 'mainContainerView',
            mainDisplayView: 'mainContainerView panel[cls=main-display-view]',
            cpViewListSchedule: 'container#cpViewListSchedule',
            dtpDate: 'datepickerfield#dtpDate',
            cpAddEditSchedule: 'container#cpAddEditSchedule',
            cpChildListSchedule: 'container#cpChildListSchedule'
        },

        control: {
            "grid#mygrid2": {
                itemdoubletap: 'onGridItemDoubletapGridSchedule'
            },
            "selectfield#cmbFilterScheduler": {
                change: 'onSelectfieldChangeGroupMember'
            },
            "button#btnCloseGroupSchedule": {
                tap: 'onButtonTapCloseGroupSchedule'
            },
            "datepickerfield#dtpDate": {
                change: 'onDatepickerfieldChange'
            },
            "button#btnDay": {
                tap: 'onButtonTapMonth'
            },
            "button#btnWeek": {
                tap: 'onButtonTapWeek'
            },
            "button#btnMonth": {
                tap: 'onButtonTapDay'
            },
            "container#cpChildListSchedule": {
                initialize: 'onContainerInitializeViewScheduler'
            },
            "button#btnAddNewScheduler": {
                tap: 'onButtonTapAddNewScheduler'
            }
        }
    },

    onGridItemDoubletapGridSchedule: function(dataview, index, target, record, e, eOpts) {
        var component = this.getTapSchedule();
        component.setActiveItem(1);
    },

    onSelectfieldChangeGroupMember: function(selectfield, newValue, oldValue, eOpts) {
        if(newValue==='default'){
            newValue = '';
        }

        var dateSelect = this.getDtpDate().getValue();
        if(null=== dateSelect)
            dateSelect = new Date();

        var viewPreset = HKD.util.Utilities.viewPreset;

        this.onReloadScheduler(viewPreset,dateSelect,newValue);
    },

    onButtonTapCloseGroupSchedule: function(button, e, eOpts) {
        this.getCtnSchedule().removeAt(0);
        Ext.getCmp('tpnSchedule').show({ type: 'slide', duration: 500 });
        Ext.getCmp('cpViewListSchedule').hide();

    },

    onDatepickerfieldChange: function(datepickerfield, newDate, oldDate, eOpts) {
        if(typeof(this.getFilterSchedule())!=='undefined'){

            var cmbFilterScheduler = this.getFilterSchedule().getValue(),
                viewPreset = HKD.util.Utilities.viewPreset,
                dateSelect = newDate;
            console.log(newDate);
            if(cmbFilterScheduler==='default'){
                cmbFilterScheduler = '';
            }

            this.onReloadScheduler(viewPreset,dateSelect,cmbFilterScheduler);
        }
    },

    onButtonTapMonth: function(button, e, eOpts) {
        var cmbFilterScheduler = this.getFilterSchedule().getValue(),
            dateSelect = this.getDtpDate().getValue();

        if(null=== dateSelect)
            dateSelect = new Date();
        if(cmbFilterScheduler==='default'){
            cmbFilterScheduler = '';
        }
        HKD.util.Utilities.viewPreset = 2;
        var viewPreset = HKD.util.Utilities.viewPreset;
        this.onReloadScheduler(viewPreset,dateSelect,cmbFilterScheduler);
    },

    onButtonTapWeek: function(button, e, eOpts) {
        var cmbFilterScheduler = this.getFilterSchedule().getValue(),
            dateSelect = this.getDtpDate().getValue();

        if(null=== dateSelect)
            dateSelect = new Date();
        if(cmbFilterScheduler==='default'){
            cmbFilterScheduler = '';
        }
        HKD.util.Utilities.viewPreset = 1;
        var viewPreset = HKD.util.Utilities.viewPreset;
        this.onReloadScheduler(viewPreset,dateSelect,cmbFilterScheduler);
    },

    onButtonTapDay: function(button, e, eOpts) {
        var cmbFilterScheduler = this.getFilterSchedule().getValue(),
            dateSelect = this.getDtpDate().getValue();

        if(null=== dateSelect)
            dateSelect = new Date();
        if(cmbFilterScheduler==='default'){
            cmbFilterScheduler = '';
        }
        HKD.util.Utilities.viewPreset = 0;
        var viewPreset = HKD.util.Utilities.viewPreset;
        this.onReloadScheduler(viewPreset,dateSelect,cmbFilterScheduler);
    },

    onContainerInitializeViewScheduler: function(component, eOpts) {
                var me = this;
                if(newValue==='default')return;
                //Ext.getCmp('tpnSchedule').hide();
                //Ext.getCmp('cpViewListSchedule').show({ type: 'slide', duration: 500 });
                var ctnGroupSchedule = me.getCpChildListSchedule();
                var newValue="";
                var overlay ="";
                var nowDate = new Date(); //Ext.Date.format(new Date(),"Y-m-d");
                Ext.define('Resource', {
                    extend : 'Sch.model.Resource',
                    idProperty:'Id',
                    nameField:'Name',
                    fields: [
                        {name:'Id',type: 'string'},
                        {name: 'Name',type: 'string'}

                    ]
                });

                Ext.define('Event', {
                    extend : 'Sch.model.Event',
                    idProperty:'Id',
                    startDateField  : 'StartDate',
                    endDateField    : 'EndDate',
                    resourceIdField : 'ResourceId',
                    nameField       : 'Name',
                    fields: [
                        {name:'Id', type: 'string'},
                        {name:'ResourceId', type: 'string'},
                        {name:'Name',type: 'string'},
                        {name:'StartDate',type: 'date', dateFormat : 'Y-m-d'},
                        {name:'EndDate',type: 'date', dateFormat : 'Y-m-d' }
                    ]
                });
                ////////////////////////Schedule////////////////////
                var resourceStore = new Sch.data.ResourceStore({
                    model : 'Resource',
                    autoLoad:true,
                    proxy : {
                        type : 'ajax',
                        extraParams: {idDate : nowDate, customId : newValue} ,
                        url: apiUrl +'schedule/LoadStaffForSmartPhone',
                        reader: {
                            type : 'json',
                            rootProperty: 'results'
                        }

                   }
                });
                var eventStore = new Sch.data.EventStore({
                    autoLoad: true,
                    model : 'Event',
                    autoSync: true,
                    batch: false,
                    proxy: {
                        type: 'ajax',
                        extraParams: {idDate : nowDate, customId : newValue} ,
                        url: apiUrl +'schedule/LoadScheduleForSmartPhone',
                        reader: {
                            type: 'json',
                            rootProperty: 'results'
                        },
                        writer: {
                            type: 'json',
                            rootProperty: 'results'
                        },
                        listeners: {
                            exception: function(proxy, response, operation, options){
                                var msg = response.message ? response.message : Ext.decode(response.responseText).message;
                                // ideally an app would provide a less intrusive message display
                                task.cancel();
                                Ext.Viewport.unmask();
                                Ext.Msg.alert('Server Error', msg);
                            }
                        }
                    }
                });
                Sch.preset.Manager.registerPreset("month_final", {
                    timeColumnWidth: 20,
                    rowHeight: 20,
                    displayDateFormat: 'Y/m/d',
                    shiftUnit: "MONTH",
                    shiftIncrement: 1,
                    //defaultSpan: 10,
                    timeResolution: {
                        unit: "DAY",
                        increment: 1
                    },
                    headerConfig: {
                        bottom: {
                            unit: "DAY",
                            align: 'center',
                            renderer: function (start) {
                                return Ext.Date.dayNames[start.getDay()].substring(0, 1);
                            }
                        },
                        middle: {
                            unit: "DAY",
                            align: 'center',
                            dateFormat: 'd'
                        },
                        top: {
                            unit: "MONTH",
                            dateFormat: 'F Y',
                            align: 'center'
                        }
                    }
                });

                Sch.preset.Manager.registerPreset("week_final", {
                    timeColumnWidth: 20,
                    rowHeight: 20,
                    displayDateFormat: 'Y/m/d',
                    shiftUnit: "WEEK",
                    shiftIncrement: 4,
                    timeResolution: {
                        unit: "DAY",
                        increment: 1
                    },
                    headerConfig: {
                        middle: {
                            unit: "WEEK",
                            align: 'center',
                            dateFormat: 'W'
                        },
                        top: {
                            unit: "MONTH",
                            dateFormat: 'F Y',
                            align: 'center'
                        }
                    }
                });
                //console.log(eventStore.getData());
                var scheduler = new Sch.panel.SchedulerGrid({
                    id : 'firstScheduler',
                    startDate : new Date(new Date().getFullYear(), new Date().getMonth(),1),
                    endDate : new Date(new Date().getFullYear(),new Date().getMonth(),31),
                    //lockedWidth: 180,
                    rowHeight : 50,
                    //rowWidth : 65,
                    viewPreset  : 'month_final',
                    compactMode : false,

                    //enableSchedulePinch: 'vertical',    // Only row height can be changed, no time axis zoom
                    //enableEventPinch: false,
                    eventBodyTemplate :
                                        '<dl>' +
                                            '<dt>{[values.Name || "" ]}</dt>' +
                                        '</dl>',
        //             onEventCreated: function (newEventRecord) {
        //                 // Supply default record values etc.
        //                 newEventRecord.set({
        //                     Name: 'New task''<div class="remove"></div>'+
        //                 });
        //             },
                    viewConfig : { forceFit : false},
                    eventRenderer : function (event, resource, data) {
        //                 data.cls = resource.data.Name;
        //                 //console.log(data);
        //                 task.cancel();
        //                 Ext.Viewport.unmask();
        //                 return event.data;
                    },

                    rowLines: true,
                    initComponent : function() {
                        me.callParent(arguments);
                    },
                    columns     : [
                        {
                            header: 'スタッフ名',
                            locked: true,
                            field : 'Name',
                            width: 120
                        }
                    ],
                    barMargin       : 10,
                    resourceStore   : resourceStore,
                    eventStore      : eventStore
                });
                scheduler.on({
                    eventsingletap : function(sch, eventRecord, e, eOpts) {
                            me.eventRecord = eventRecord;
                            task.delay(500);
                            var isPhone = Ext.os.deviceType == 'Phone';
                            //console.log(rec.getData().ResourceId + rec.getData().StartDate + rec.getData().EndDate);
                            overlay = Ext.Viewport.add([{
                            xtype: 'panel',
                            //id:'panelDetailTask',
                            left: 0,
                            top: 0,
                            layout:'fit',
                            modal: true,
                            showAnimation: {
                                type: 'popIn',
                                duration: 600
                            },
                            hideOnMaskTap: true,
                            hidden: true,
                            hideAnimation: {
                                type: 'popOut',
                                duration: 600
                            },
                            fullscreen: true,
                            width: isPhone ? 260 : 800,
                            height: isPhone ? '70%' : 300,
                            //scrollable: true,
                            items: [
                                {
                                    xtype: 'grid',
                                    //flex: 1,
                                    id: 'gridDetailTask',
                                    width: '100%',
                                    itemHeight: 40,
                                    title: 'スケジュール詳細',
                                    //height : 500,
                                    columns: [
                                        {
                                            xtype: 'column',
                                            width: 80,
                                            align: 'center',
                                            dataIndex: 'SCHEDULE_ID',
                                            text: 'ＩＤ'
                                        },
                                        {
                                            xtype: 'column',
                                            width: 120,
                                            align: 'left',
                                            dataIndex: 'STAFF_NAME',
                                            text: 'スタッフ名'
                                        },
                                        {
                                            xtype: 'column',
                                            width: 220,
                                            align: 'left',
                                            dataIndex: 'TITLE',
                                            text: 'タイトル'
                                        },
                                        {
                                            xtype: 'templatecolumn',
                                            tpl: [
                                                '{START_DATETIME}'
                                            ],
                                            width: 190,
                                            text: '開始日時'
                                        },
                                        {
                                            xtype: 'templatecolumn',
                                            tpl: [
                                                '{END_DATETIME}'
                                            ],
                                            width: 190,
                                            flex: 1,
                                            text: '終了日時'
                                        }
                                    ],
                                    listeners: [
                                    {
                                        fn: function(dataview, index, target, record, e, eOpts) {
                                            var filterScheduler = Ext.getCmp('cmbFilterScheduler');
                                            console.log('itemtap' + filterScheduler);
                                            HKD.util.Utilities.SCHEDULE_ID = record.data.SCHEDULE_ID.trim();
                                            if(typeof(filterScheduler) !=='undefined'){
                                                HKD.util.Utilities.filterScheduler = filterScheduler.getValue();
                                                HKD.util.Utilities.dtpDate = me.getDtpDate().getValue();
                                                this.getParent().setHideOnMaskTap(true);
                                            }
                                            var mainDisplayView = me.getMainDisplayView();
                                            mainDisplayView.removeAt(0);
                                            mainDisplayView.add({
                                                xtype: 'navigationview',
                                                showAnimation: 'slide',
                                                navigationBar: null,
                                                items: [
                                                    {
                                                        xtype: 'navigationBar'
                                                    },
                                                    {
                                                        xtype: 'cpAddEditSchedule'
                                                    }
                                                ]
                                            });
                                            this.getParent().destroy();
                                            //overlay.removeAll();
                                            //overlay = null;
                                        },
                                        event: 'itemsingletap'
                                       }
                                   ]
                                },{
                                        xtype: 'button',
                                        iconCls: 'delete',
                                        modal: true,
                                        hideOnMaskTap: true,
                                        ui: 'plain',
                                        //hidden: true,
                                        style: {
                                            color: '#fff',
                                            'font-size': '1em'
                                        },
                                        padding: 0,
                                        right: 5,
                                        top: 3,
                                        bottom:0,
                                        listeners: {
                                            tap: function (component, eOpts) {
                                                //component.destroy();
                                                this.getParent().destroy();
                                                task.cancel();
                                                Ext.Viewport.unmask();
                                            }
                                      }
                                }
                           ],
                           listeners: [
                            {
                                fn: function(component, eOpts) {

                                    var userId = HKD.util.Utilities.userEmpInfo.EMP_ID,
                                        resourceId = eventRecord.getData().ResourceId,
                                        startDate = eventRecord.getData().StartDate,
                                        endDate = eventRecord.getData().EndDate,
                                        gridDetailTask = Ext.getCmp('gridDetailTask');
                                        //console.log(gridDetailTask);
                                    Ext.Ajax.request({
                                        method: 'POST',
                                        url: apiUrl + 'schedule/LoadDetailTaskScheduler',
                                        params:{
                                                'userId':userId,
                                                'resourceId': resourceId,
                                                'startDate': startDate,
                                                'endDate': endDate
                                        },
                                        success: function(data){
                                            var obj = Ext.decode(data.responseText);
                                                if(obj.responseCode === 403){
                                                    MessageCommon.showErrorMessage(obj.responseMessage);
                                                }else{
                                                    if(obj.success === true){
                                                        if(gridDetailTask.getData() !==null)gridDetailTask.getData().removeAll();
                                                        if(obj.data.length>0)gridDetailTask.setData(obj.data);
                                                        gridDetailTask.refresh();
                                                    }
                                                }

                                        },
                                        failure: function(error){
                                            MessageCommon.showErrorMessage(MessageCommon.MesErrorServerFail);
                                            task.cancel();
                                            Ext.Viewport.unmask();
                                        }
                                    });
                                    var el = sch.getSchedulingView().getElementFromEventRecord(eventRecord);
                                    component.showBy(el,'c-c?');
                                    var filterScheduler = Ext.getCmp('cmbFilterScheduler');
                                    console.log('loadDetail' + filterScheduler);
                                    task.cancel();
                                    Ext.Viewport.unmask();
                                },
                                event: 'initialize' //initialize
                            }

                        ]

                        },
                        {
                        }]);
                    }
                });
                component.remove('firstScheduler');
                component.add(scheduler);
    },

    onButtonTapAddNewScheduler: function(button, e, eOpts) {
        HKD.util.Utilities.SCHEDULE_ID = Constant.NEW_OBJECT_ID;
        var mainDisplayView = this.getMainDisplayView();
        console.log(mainDisplayView);
        mainDisplayView.removeAt(0);
        mainDisplayView.add({
            xtype: 'navigationview',
            showAnimation: 'slide',
            navigationBar: null,
            items: [
                {
                    xtype: 'navigationBar'
                },
                {
                    xtype: 'cpAddEditSchedule'
                }
            ]
        });
    },

    onReloadScheduler: function(p_viewPreset, p_dtpDate, p_filterGroupScheduler) {
        if(p_viewPreset==='' || null === p_viewPreset) p_viewPreset = 2;

        if(p_dtpDate==='' || null === p_dtpDate) p_dtpDate = new Date();
        if(p_filterGroupScheduler==='default') p_filterGroupScheduler = '';
        var cSCheduler = HKD.app.getController('CSchedule');
        // declare variable
        var dtpDate = this.getDtpDate().setValue(p_dtpDate);
        var filterScheduler = Ext.getCmp('cmbFilterScheduler').setValue(p_filterGroupScheduler);
        console.log(dtpDate + filterScheduler);
        var ctnGroupSchedule = this.getCpChildListSchedule(),
            item = ctnGroupSchedule.items.items[1],
            scheduler = ctnGroupSchedule.down('#firstScheduler'),
            startDate = new Date(p_dtpDate.getFullYear(), p_dtpDate.getMonth(),1),
            endDate = new Date(p_dtpDate.getFullYear(), p_dtpDate.getMonth(),31);

        // set startDate and endDate need display on scheduler
        if (typeof(item) === 'undefined'){return;}
        else{
            item.startDate = startDate;
            item.endDate = endDate;}
        // set param when reload scheeduler
        scheduler.resourceStore.getProxy().setExtraParam("idDate", p_dtpDate);
        scheduler.resourceStore.getProxy().setExtraParam("customId", p_filterGroupScheduler);
        scheduler.eventStore.getProxy().setExtraParam("idDate", p_dtpDate);
        scheduler.eventStore.getProxy().setExtraParam("customId", p_filterGroupScheduler);

        // set viewPreset with param
        if(p_viewPreset===0){
            startDate = new Date(p_dtpDate.getFullYear(), p_dtpDate.getMonth(),p_dtpDate.getDate(),1);
            endDate = new Date(p_dtpDate.getFullYear(), p_dtpDate.getMonth(),p_dtpDate.getDate(),31);
            scheduler.switchViewPreset('hourAndDay',startDate,endDate);
        }else if(p_viewPreset===1){
            startDate = new Date(p_dtpDate.getFullYear(), p_dtpDate.getMonth(),p_dtpDate.getDate(),1);
            endDate = new Date(p_dtpDate.getFullYear(), p_dtpDate.getMonth(),p_dtpDate.getDate(),31);
            scheduler.switchViewPreset('weekAndDay',startDate,endDate);
        }else{
            scheduler.switchViewPreset('month_final',startDate,endDate);
        }
        // reload and refresh scheduler
        scheduler.resourceStore.load();
        scheduler.eventStore.load();
        scheduler.getSchedulingView().refresh();
        scheduler.refresh();

    }

});