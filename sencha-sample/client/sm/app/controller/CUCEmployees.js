/*
 * File: app/controller/CUCEmployees.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HKD.controller.CUCEmployees', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            txtEmployees: 'textfield#txtEmployees',
            gridEmployees: 'grid#gridEmployees'
        },

        control: {
            "textfield#txtEmployees": {
                keyup: 'onTextfieldKeyupTxtEmployees'
            },
            "grid#gridEmployees": {
                selectionchange: 'onGridSelectionChangeGridEmployees'
            }
        }
    },

    onTextfieldKeyupTxtEmployees: function(textfield, e, eOpts) {
        if(textfield.getValue() !== '' && HKD.util.Utilities.ucEmployees.employeeStoreClone !== null){
            var txtEmployees = this.getTxtEmployees();
            var data = [];
            for(var i = 0; i < HKD.util.Utilities.ucEmployees.employeeStoreClone.length; i++){
                if(HKD.util.Utilities.ucEmployees.employeeStoreClone[i].EMP_NAME.indexOf(textfield.getValue().toString()) > -1){
                    data.push(HKD.util.Utilities.ucEmployees.employeeStoreClone[i]);
                }
            }
            var me = this;
            if(data.length > 0){
                if(!HKD.util.Utilities.ucEmployees.showAutocompletePanel){
                    HKD.util.Utilities.ucEmployees.showAutocompletePanel = true;
                    var overlay = Ext.Viewport.add([
                        {
                            xtype: 'panel',
                            id: 'pnlListEmployees',
                            left: txtEmployees.element.getX(),
                            top: txtEmployees.element.getY() + txtEmployees.element.dom.offsetHeight,

                            width: txtEmployees.element.dom.offsetWidth,
                            height: 350,
                            fullscreen: true,
                            layout: 'fit'
                        },
                        {
                            xtype: 'button',
                            text: 'X',
                            width: 33,
                            height: 30,
                            style: {
                                background: "#000",
                                color: '#fff',
                                'border-radius': '150px',
                                border: '1px solid #000'
                            },
                            padding: 0,
                            left: txtEmployees.element.getX() + txtEmployees.element.dom.offsetWidth - 50,
                            top: txtEmployees.element.getY() + txtEmployees.element.dom.offsetHeight - 20,
                            listeners: {
                                tap: function (component, eOpts) {
                                    Ext.getCmp('pnlListEmployees').destroy();
                                    HKD.util.Utilities.ucEmployees.showAutocompletePanel = false;
                                    this.destroy();
                                }
                            }
                        }
                    ]);
                }
                this.refreshList(data);
            }
        }
    },

    onGridSelectionChangeGridEmployees: function(selectable, records, eOpts) {
        if(HKD.util.Utilities.ucEmployees.totalReceiver != this.getGridEmployees().getStore().getCount()){
            for(var i = 0; i < records.length; i++){
                HKD.util.Utilities.ucEmployees.totalReceiver--;
                HKD.util.Utilities.ucEmployees.employeeStoreClone.push(records[i].getData());
            }
        }
    },

    refreshList: function(data) {
        var me = this;

        if(Ext.getCmp('listEmployees')){
            Ext.getCmp('listEmployees').destroy();
        }
        Ext.getCmp('pnlListEmployees').add({
            region: 'center',
            fullscreen: true,
            id: 'listEmployees',
            xtype: 'list',
            data: data,
            itemTpl: '<div>{EMP_NAME}</div>',
            listeners: {
                itemsingletap: function (list, idx, target, record, evt) {
                    HKD.util.Utilities.ucEmployees.totalReceiver++;
                    me.getGridEmployees().getStore().add(record.getData());
                    for(var i = 0; i < HKD.util.Utilities.ucEmployees.employeeStoreClone.length; i++){
                        if(HKD.util.Utilities.ucEmployees.employeeStoreClone[i].EMP_ID == record.get('EMP_ID')){
                            HKD.util.Utilities.ucEmployees.employeeStoreClone.splice(i, 1);
                            break;
                        }
                    }
                    var data = list.getData();
                    data.splice(idx, 1);
                    if(data.length > 0 && typeof(data[0]) !== 'undefined'){
                        me.refreshList(data);
                    }else{
                        Ext.getCmp('listEmployees').destroy();
                    }
                }
            }
        });
    },

    resetUCEmployees: function() {
        HKD.util.Utilities.ucEmployees = {
            showAutocompletePanel: false,
            loadData: false,
            employeeStoreClone: [],
            totalReceiver: 0
        };
        Ext.getStore('StEmployees').removeAll();
        if(!HKD.util.Utilities.ucEmployees.loadData){
            HKD.util.Utilities.ucEmployees.loadData = true;
            var employeeStore = Ext.getStore('StEmployee');
            employeeStore.clearFilter();
            var interval = setInterval(function(){
                if(employeeStore.getCount() > 0){
                    clearInterval(interval);
                    employeeStore.each(function(record){
                        if(record.get('EMP_AUTH_ID') !== '0')
                        HKD.util.Utilities.ucEmployees.employeeStoreClone.push({
                            EMP_ID: record.get('EMP_ID'),
                            EMP_NAME: record.get('EMP_NAME')
                        });
                    });
                }
            }, 100);
        }
    }

});